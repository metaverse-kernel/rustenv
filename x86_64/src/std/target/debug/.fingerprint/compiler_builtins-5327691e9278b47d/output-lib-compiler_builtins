{"message":"failed to resolve: could not find `prelude` in `core`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":"could not find `prelude` in `core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `prelude` in `core`\u001b[0m\n\n"}
{"message":"unresolved import `core::ops`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/float/mod.rs","byte_start":4,"byte_end":13,"line_start":1,"line_end":1,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"use core::ops;","highlight_start":5,"highlight_end":14}],"label":"no `ops` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `core::ops`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/float/mod.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse core::ops;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `ops` in the root\u001b[0m\n\n"}
{"message":"unresolved import `core::ops`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/mod.rs","byte_start":4,"byte_end":13,"line_start":1,"line_end":1,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"use core::ops;","highlight_start":5,"highlight_end":14}],"label":"no `ops` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `core::ops`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/mod.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse core::ops;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `ops` in the root\u001b[0m\n\n"}
{"message":"unresolved import `core::intrinsics`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/mod.rs","byte_start":233,"byte_end":243,"line_start":11,"line_end":11,"column_start":11,"column_end":21,"is_primary":true,"text":[{"text":"use core::intrinsics::{atomic_load_unordered, atomic_store_unordered, exact_div};","highlight_start":11,"highlight_end":21}],"label":"could not find `intrinsics` in `core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `core::intrinsics`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/mod.rs:11:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse core::intrinsics::{atomic_load_unordered, atomic_store_unordered, exact_div};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `intrinsics` in `core`\u001b[0m\n\n"}
{"message":"unresolved import `core::mem`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/mod.rs","byte_start":309,"byte_end":318,"line_start":12,"line_end":12,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"use core::mem;","highlight_start":5,"highlight_end":14}],"label":"no `mem` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this module instead","code":null,"level":"help","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/mod.rs","byte_start":309,"byte_end":318,"line_start":12,"line_end":12,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"use core::mem;","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":"crate::mem","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `core::mem`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/mod.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse core::mem;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `mem` in the root\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this module instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse \u001b[0m\u001b[0m\u001b[38;5;10mcrate::mem\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~\u001b[0m\n\n"}
{"message":"unresolved import `core::ops`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/mod.rs","byte_start":330,"byte_end":333,"line_start":13,"line_end":13,"column_start":11,"column_end":14,"is_primary":true,"text":[{"text":"use core::ops::{BitOr, Shl};","highlight_start":11,"highlight_end":14}],"label":"could not find `ops` in `core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `core::ops`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/mod.rs:13:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse core::ops::{BitOr, Shl};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `ops` in `core`\u001b[0m\n\n"}
{"message":"unresolved import `core::arch`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs","byte_start":1064,"byte_end":1068,"line_start":19,"line_end":19,"column_start":11,"column_end":15,"is_primary":true,"text":[{"text":"use core::arch::asm;","highlight_start":11,"highlight_end":15}],"label":"could not find `arch` in `core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `core::arch`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs:19:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse core::arch::asm;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `arch` in `core`\u001b[0m\n\n"}
{"message":"unresolved import `core::intrinsics`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs","byte_start":1079,"byte_end":1095,"line_start":20,"line_end":20,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"use core::intrinsics;","highlight_start":5,"highlight_end":21}],"label":"no `intrinsics` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `core::intrinsics`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs:20:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse core::intrinsics;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `intrinsics` in the root\u001b[0m\n\n"}
{"message":"failed to resolve: could not find `arch` in `core`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs","byte_start":6664,"byte_end":6668,"line_start":189,"line_end":189,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"    use core::arch::x86_64::{__m128i, _mm_cmpeq_epi8, _mm_movemask_epi8, _mm_set1_epi8};","highlight_start":15,"highlight_end":19}],"label":"could not find `arch` in `core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `arch` in `core`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs:189:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m189\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use core::arch::x86_64::{__m128i, _mm_cmpeq_epi8, _mm_movemask_epi8, _mm_set1_epi8};\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `arch` in `core`\u001b[0m\n\n"}
{"message":"unresolved import `core::mem`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs","byte_start":1101,"byte_end":1110,"line_start":21,"line_end":21,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"use core::mem;","highlight_start":5,"highlight_end":14}],"label":"no `mem` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items instead","code":null,"level":"help","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs","byte_start":1101,"byte_end":1110,"line_start":21,"line_end":21,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"use core::mem;","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":"crate::mem","suggestion_applicability":"MaybeIncorrect","expansion":null},{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs","byte_start":1101,"byte_end":1110,"line_start":21,"line_end":21,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"use core::mem;","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":"crate::mem::mem","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `core::mem`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs:21:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse core::mem;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `mem` in the root\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse \u001b[0m\u001b[0m\u001b[38;5;10mcrate::mem\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse \u001b[0m\u001b[0m\u001b[38;5;10mcrate::mem::mem\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"unresolved import `core::intrinsics`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/x86_64.rs","byte_start":31,"byte_end":47,"line_start":3,"line_end":3,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"use core::intrinsics;","highlight_start":5,"highlight_end":21}],"label":"no `intrinsics` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `core::intrinsics`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/x86_64.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse core::intrinsics;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `intrinsics` in the root\u001b[0m\n\n"}
{"message":"failed to resolve: could not find `arch` in `core`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs","byte_start":7725,"byte_end":7729,"line_start":191,"line_end":191,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"        core::arch::asm!(","highlight_start":15,"highlight_end":19}],"label":"could not find `arch` in `core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `arch` in `core`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs:191:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        core::arch::asm!(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `arch` in `core`\u001b[0m\n\n"}
{"message":"failed to resolve: could not find `arch` in `core`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/probestack.rs","byte_start":4732,"byte_end":4736,"line_start":134,"line_end":134,"column_start":7,"column_end":11,"is_primary":true,"text":[{"text":"core::arch::global_asm!(","highlight_start":7,"highlight_end":11}],"label":"could not find `arch` in `core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `arch` in `core`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/probestack.rs:134:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mcore::arch::global_asm!(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `arch` in `core`\u001b[0m\n\n"}
{"message":"cannot find macro `assert` in this scope","code":null,"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs","byte_start":5007,"byte_end":5013,"line_start":143,"line_end":143,"column_start":17,"column_end":23,"is_primary":true,"text":[{"text":"        const { assert!(mem::size_of::<T>() != 0) };","highlight_start":17,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find macro `assert` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs:143:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        const { assert!(mem::size_of::<T>() != 0) };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\n"}
{"message":"cannot find macro `cfg` in this scope","code":null,"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/leading_zeros.rs","byte_start":5388,"byte_end":5391,"line_start":143,"line_end":143,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"        if cfg!(any(target_arch = \"riscv32\", target_arch = \"riscv64\")) {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`cfg` is in scope, but it is an attribute: `#[cfg]`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find macro `cfg` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/leading_zeros.rs:143:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(any(target_arch = \"riscv32\", target_arch = \"riscv64\")) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `cfg` is in scope, but it is an attribute: `#[cfg]`\u001b[0m\n\n"}
{"message":"cannot find macro `cfg` in this scope","code":null,"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs","byte_start":5038,"byte_end":5041,"line_start":100,"line_end":100,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        cfg!(target_feature = \"zbb\")","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`cfg` is in scope, but it is an attribute: `#[cfg]`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find macro `cfg` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs:100:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        cfg!(target_feature = \"zbb\")\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `cfg` is in scope, but it is an attribute: `#[cfg]`\u001b[0m\n\n"}
{"message":"cannot find macro `cfg` in this scope","code":null,"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs","byte_start":4845,"byte_end":4848,"line_start":97,"line_end":97,"column_start":15,"column_end":18,"is_primary":true,"text":[{"text":"    } else if cfg!(any(target_arch = \"riscv32\", target_arch = \"riscv64\")) {","highlight_start":15,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`cfg` is in scope, but it is an attribute: `#[cfg]`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find macro `cfg` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs:97:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    } else if cfg!(any(target_arch = \"riscv32\", target_arch = \"riscv64\")) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `cfg` is in scope, but it is an attribute: `#[cfg]`\u001b[0m\n\n"}
{"message":"cannot find macro `cfg` in this scope","code":null,"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs","byte_start":4801,"byte_end":4804,"line_start":96,"line_end":96,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        cfg!(target_feature = \"vis3\")","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`cfg` is in scope, but it is an attribute: `#[cfg]`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find macro `cfg` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs:96:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        cfg!(target_feature = \"vis3\")\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `cfg` is in scope, but it is an attribute: `#[cfg]`\u001b[0m\n\n"}
{"message":"cannot find macro `cfg` in this scope","code":null,"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs","byte_start":4653,"byte_end":4656,"line_start":94,"line_end":94,"column_start":15,"column_end":18,"is_primary":true,"text":[{"text":"    } else if cfg!(any(target_arch = \"sparc\", target_arch = \"sparc64\")) {","highlight_start":15,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`cfg` is in scope, but it is an attribute: `#[cfg]`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find macro `cfg` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs:94:15\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    } else if cfg!(any(target_arch = \"sparc\", target_arch = \"sparc64\")) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `cfg` is in scope, but it is an attribute: `#[cfg]`\u001b[0m\n\n"}
{"message":"cannot find macro `cfg` in this scope","code":null,"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs","byte_start":4599,"byte_end":4602,"line_start":92,"line_end":92,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            cfg!(target_feature = \"v5te\")","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`cfg` is in scope, but it is an attribute: `#[cfg]`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find macro `cfg` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs:92:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            cfg!(target_feature = \"v5te\")\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `cfg` is in scope, but it is an attribute: `#[cfg]`\u001b[0m\n\n"}
{"message":"cannot find macro `cfg` in this scope","code":null,"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs","byte_start":4309,"byte_end":4312,"line_start":87,"line_end":87,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            cfg!(target_feature = \"v6t2\")","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`cfg` is in scope, but it is an attribute: `#[cfg]`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find macro `cfg` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs:87:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            cfg!(target_feature = \"v6t2\")\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `cfg` is in scope, but it is an attribute: `#[cfg]`\u001b[0m\n\n"}
{"message":"cannot find macro `cfg` in this scope","code":null,"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs","byte_start":4025,"byte_end":4028,"line_start":83,"line_end":83,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"        if cfg!(target_feature = \"thumb-mode\") {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`cfg` is in scope, but it is an attribute: `#[cfg]`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find macro `cfg` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs:83:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cfg!(target_feature = \"thumb-mode\") {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `cfg` is in scope, but it is an attribute: `#[cfg]`\u001b[0m\n\n"}
{"message":"cannot find macro `cfg` in this scope","code":null,"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs","byte_start":3986,"byte_end":3989,"line_start":82,"line_end":82,"column_start":8,"column_end":11,"is_primary":true,"text":[{"text":"    if cfg!(target_arch = \"arm\") {","highlight_start":8,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`cfg` is in scope, but it is an attribute: `#[cfg]`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find macro `cfg` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs:82:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if cfg!(target_arch = \"arm\") {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `cfg` is in scope, but it is an attribute: `#[cfg]`\u001b[0m\n\n"}
{"message":"cannot determine resolution for the macro `asm`","code":null,"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs","byte_start":7797,"byte_end":7800,"line_start":235,"line_end":235,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"            asm!(","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the macro `asm`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs:235:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m235\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            asm!(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the macro `asm`","code":null,"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs","byte_start":7374,"byte_end":7377,"line_start":215,"line_end":215,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        asm!(","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the macro `asm`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs:215:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        asm!(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the macro `asm`","code":null,"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs","byte_start":4447,"byte_end":4450,"line_start":124,"line_end":124,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the macro `asm`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs:124:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    asm!(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the macro `asm`","code":null,"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs","byte_start":4260,"byte_end":4263,"line_start":117,"line_end":117,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the macro `asm`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs:117:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    asm!(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the macro `asm`","code":null,"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs","byte_start":4070,"byte_end":4073,"line_start":110,"line_end":110,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the macro `asm`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs:110:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    asm!(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the macro `asm`","code":null,"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs","byte_start":2660,"byte_end":2663,"line_start":68,"line_end":68,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the macro `asm`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs:68:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    asm!(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the macro `asm`","code":null,"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs","byte_start":2244,"byte_end":2247,"line_start":55,"line_end":55,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the macro `asm`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs:55:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    asm!(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the macro `asm`","code":null,"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs","byte_start":2045,"byte_end":2048,"line_start":48,"line_end":48,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the macro `asm`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs:48:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    asm!(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot determine resolution for the macro `asm`","code":null,"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs","byte_start":1843,"byte_end":1846,"line_start":41,"line_end":41,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    asm!(","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the macro `asm`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs:41:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    asm!(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\n"}
{"message":"cannot find attribute `derive` in this scope","code":null,"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/float/cmp.rs","byte_start":78,"byte_end":84,"line_start":6,"line_end":6,"column_start":3,"column_end":9,"is_primary":true,"text":[{"text":"#[derive(Clone, Copy)]","highlight_start":3,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `derive` in this scope\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/float/cmp.rs:6:3\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Clone, Copy)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\n"}
{"message":"failed to resolve: could not find `ops` in `core`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/float/div.rs","byte_start":425,"byte_end":428,"line_start":15,"line_end":15,"column_start":30,"column_end":33,"is_primary":true,"text":[{"text":"    <F as Float>::Int: core::ops::Mul,","highlight_start":30,"highlight_end":33}],"label":"could not find `ops` in `core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `ops` in `core`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/float/div.rs:15:30\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    <F as Float>::Int: core::ops::Mul,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `ops` in `core`\u001b[0m\n\n"}
{"message":"failed to resolve: could not find `fmt` in `core`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/float/mod.rs","byte_start":272,"byte_end":275,"line_start":19,"line_end":19,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"    + core::fmt::Debug","highlight_start":13,"highlight_end":16}],"label":"could not find `fmt` in `core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `fmt` in `core`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/float/mod.rs:19:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + core::fmt::Debug\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `fmt` in `core`\u001b[0m\n\n"}
{"message":"failed to resolve: could not find `intrinsics` in `core`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs","byte_start":3925,"byte_end":3935,"line_start":78,"line_end":78,"column_start":20,"column_end":30,"is_primary":true,"text":[{"text":"    unsafe { core::intrinsics::unreachable() }","highlight_start":20,"highlight_end":30}],"label":"could not find `intrinsics` in `core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `intrinsics` in `core`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs:78:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    unsafe { core::intrinsics::unreachable() }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `intrinsics` in `core`\u001b[0m\n\n"}
{"message":"failed to resolve: could not find `ffi` in `core`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/shift.rs","byte_start":2217,"byte_end":2220,"line_start":81,"line_end":81,"column_start":50,"column_end":53,"is_primary":true,"text":[{"text":"    pub extern \"C\" fn __ashldi3(a: u64, b: core::ffi::c_uint) -> u64 {","highlight_start":50,"highlight_end":53}],"label":"could not find `ffi` in `core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `ffi` in `core`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/shift.rs:81:50\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub extern \"C\" fn __ashldi3(a: u64, b: core::ffi::c_uint) -> u64 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `ffi` in `core`\u001b[0m\n\n"}
{"message":"failed to resolve: could not find `ffi` in `core`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/shift.rs","byte_start":2640,"byte_end":2643,"line_start":99,"line_end":99,"column_start":50,"column_end":53,"is_primary":true,"text":[{"text":"    pub extern \"C\" fn __ashrdi3(a: i64, b: core::ffi::c_uint) -> i64 {","highlight_start":50,"highlight_end":53}],"label":"could not find `ffi` in `core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `ffi` in `core`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/shift.rs:99:50\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub extern \"C\" fn __ashrdi3(a: i64, b: core::ffi::c_uint) -> i64 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `ffi` in `core`\u001b[0m\n\n"}
{"message":"failed to resolve: could not find `ffi` in `core`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/shift.rs","byte_start":3063,"byte_end":3066,"line_start":117,"line_end":117,"column_start":50,"column_end":53,"is_primary":true,"text":[{"text":"    pub extern \"C\" fn __lshrdi3(a: u64, b: core::ffi::c_uint) -> u64 {","highlight_start":50,"highlight_end":53}],"label":"could not find `ffi` in `core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `ffi` in `core`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/shift.rs:117:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub extern \"C\" fn __lshrdi3(a: u64, b: core::ffi::c_uint) -> u64 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `ffi` in `core`\u001b[0m\n\n"}
{"message":"failed to resolve: could not find `fmt` in `core`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/mod.rs","byte_start":288,"byte_end":291,"line_start":18,"line_end":18,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"    + core::fmt::Debug","highlight_start":13,"highlight_end":16}],"label":"could not find `fmt` in `core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `fmt` in `core`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/mod.rs:18:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + core::fmt::Debug\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `fmt` in `core`\u001b[0m\n\n"}
{"message":"failed to resolve: could not find `ffi` in `core`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs","byte_start":6626,"byte_end":6629,"line_start":188,"line_end":188,"column_start":51,"column_end":54,"is_primary":true,"text":[{"text":"pub unsafe fn c_string_length(mut s: *const core::ffi::c_char) -> usize {","highlight_start":51,"highlight_end":54}],"label":"could not find `ffi` in `core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `ffi` in `core`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs:188:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m188\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub unsafe fn c_string_length(mut s: *const core::ffi::c_char) -> usize {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `ffi` in `core`\u001b[0m\n\n"}
{"message":"failed to resolve: could not find `ffi` in `core`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/mod.rs","byte_start":2186,"byte_end":2189,"line_start":65,"line_end":65,"column_start":53,"column_end":56,"is_primary":true,"text":[{"text":"    pub unsafe extern \"C\" fn strlen(s: *const core::ffi::c_char) -> usize {","highlight_start":53,"highlight_end":56}],"label":"could not find `ffi` in `core`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `ffi` in `core`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/mod.rs:65:53\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub unsafe extern \"C\" fn strlen(s: *const core::ffi::c_char) -> usize {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `ffi` in `core`\u001b[0m\n\n"}
{"message":"cannot find trait `Copy` in this scope","code":{"code":"E0405","explanation":"The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/float/mod.rs","byte_start":255,"byte_end":259,"line_start":18,"line_end":18,"column_start":5,"column_end":9,"is_primary":true,"text":[{"text":"    Copy","highlight_start":5,"highlight_end":9}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0405]\u001b[0m\u001b[0m\u001b[1m: cannot find trait `Copy` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/float/mod.rs:18:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Copy\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find trait `PartialEq` in this scope","code":{"code":"E0405","explanation":"The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/float/mod.rs","byte_start":289,"byte_end":298,"line_start":20,"line_end":20,"column_start":7,"column_end":16,"is_primary":true,"text":[{"text":"    + PartialEq","highlight_start":7,"highlight_end":16}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0405]\u001b[0m\u001b[0m\u001b[1m: cannot find trait `PartialEq` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/float/mod.rs:20:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + PartialEq\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find trait `PartialOrd` in this scope","code":{"code":"E0405","explanation":"The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/float/mod.rs","byte_start":305,"byte_end":315,"line_start":21,"line_end":21,"column_start":7,"column_end":17,"is_primary":true,"text":[{"text":"    + PartialOrd","highlight_start":7,"highlight_end":17}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0405]\u001b[0m\u001b[0m\u001b[1m: cannot find trait `PartialOrd` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/float/mod.rs:21:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + PartialOrd\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find tuple struct or tuple variant `Some` in this scope","code":{"code":"E0531","explanation":"An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs","byte_start":5679,"byte_end":5683,"line_start":129,"line_end":129,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"    if let Some(quo) = duo.checked_div(div) {","highlight_start":12,"highlight_end":16}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0531]\u001b[0m\u001b[0m\u001b[1m: cannot find tuple struct or tuple variant `Some` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs:129:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if let Some(quo) = duo.checked_div(div) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find tuple struct or tuple variant `Some` in this scope","code":{"code":"E0531","explanation":"An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs","byte_start":5729,"byte_end":5733,"line_start":130,"line_end":130,"column_start":16,"column_end":20,"is_primary":true,"text":[{"text":"        if let Some(rem) = duo.checked_rem(div) {","highlight_start":16,"highlight_end":20}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0531]\u001b[0m\u001b[0m\u001b[1m: cannot find tuple struct or tuple variant `Some` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs:130:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let Some(rem) = duo.checked_rem(div) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find tuple struct or tuple variant `Some` in this scope","code":{"code":"E0531","explanation":"An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs","byte_start":8496,"byte_end":8500,"line_start":221,"line_end":221,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"    if let Some(quo) = duo.checked_div(div) {","highlight_start":12,"highlight_end":16}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0531]\u001b[0m\u001b[0m\u001b[1m: cannot find tuple struct or tuple variant `Some` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs:221:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m221\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if let Some(quo) = duo.checked_div(div) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find tuple struct or tuple variant `Some` in this scope","code":{"code":"E0531","explanation":"An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs","byte_start":8546,"byte_end":8550,"line_start":222,"line_end":222,"column_start":16,"column_end":20,"is_primary":true,"text":[{"text":"        if let Some(rem) = duo.checked_rem(div) {","highlight_start":16,"highlight_end":20}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0531]\u001b[0m\u001b[0m\u001b[1m: cannot find tuple struct or tuple variant `Some` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/specialized_div_rem/mod.rs:222:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m222\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let Some(rem) = duo.checked_rem(div) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find type `Option` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/udiv.rs","byte_start":683,"byte_end":689,"line_start":24,"line_end":24,"column_start":57,"column_end":63,"is_primary":true,"text":[{"text":"    pub extern \"C\" fn __udivmodsi4(n: u32, d: u32, rem: Option<&mut u32>) -> u32 {","highlight_start":57,"highlight_end":63}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `Option` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/udiv.rs:24:57\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub extern \"C\" fn __udivmodsi4(n: u32, d: u32, rem: Option<&mut u32>) -> u32 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find tuple struct or tuple variant `Some` in this scope","code":{"code":"E0531","explanation":"An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/udiv.rs","byte_start":766,"byte_end":770,"line_start":26,"line_end":26,"column_start":16,"column_end":20,"is_primary":true,"text":[{"text":"        if let Some(rem) = rem {","highlight_start":16,"highlight_end":20}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0531]\u001b[0m\u001b[0m\u001b[1m: cannot find tuple struct or tuple variant `Some` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/udiv.rs:26:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let Some(rem) = rem {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find type `Option` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/udiv.rs","byte_start":1335,"byte_end":1341,"line_start":49,"line_end":49,"column_start":57,"column_end":63,"is_primary":true,"text":[{"text":"    pub extern \"C\" fn __udivmoddi4(n: u64, d: u64, rem: Option<&mut u64>) -> u64 {","highlight_start":57,"highlight_end":63}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `Option` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/udiv.rs:49:57\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub extern \"C\" fn __udivmoddi4(n: u64, d: u64, rem: Option<&mut u64>) -> u64 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find tuple struct or tuple variant `Some` in this scope","code":{"code":"E0531","explanation":"An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/udiv.rs","byte_start":1418,"byte_end":1422,"line_start":51,"line_end":51,"column_start":16,"column_end":20,"is_primary":true,"text":[{"text":"        if let Some(rem) = rem {","highlight_start":16,"highlight_end":20}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0531]\u001b[0m\u001b[0m\u001b[1m: cannot find tuple struct or tuple variant `Some` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/udiv.rs:51:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let Some(rem) = rem {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find type `Option` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/udiv.rs","byte_start":2658,"byte_end":2664,"line_start":89,"line_end":89,"column_start":59,"column_end":65,"is_primary":true,"text":[{"text":"    pub extern \"C\" fn __udivmodti4(n: u128, d: u128, rem: Option<&mut u128>) -> u128 {","highlight_start":59,"highlight_end":65}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `Option` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/udiv.rs:89:59\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub extern \"C\" fn __udivmodti4(n: u128, d: u128, rem: Option<&mut u128>) -> u128 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find tuple struct or tuple variant `Some` in this scope","code":{"code":"E0531","explanation":"An unknown tuple struct/variant has been used.\n\nErroneous code example:\n\n```compile_fail,E0531\nlet Type(x) = Type(12); // error!\nmatch Bar(12) {\n    Bar(x) => {} // error!\n    _ => {}\n}\n```\n\nIn most cases, it's either a forgotten import or a typo. However, let's look at\nhow you can have such a type:\n\n```edition2018\nstruct Type(u32); // this is a tuple struct\n\nenum Foo {\n    Bar(u32), // this is a tuple variant\n}\n\nuse Foo::*; // To use Foo's variant directly, we need to import them in\n            // the scope.\n```\n\nEither way, it should work fine with our previous code:\n\n```edition2018\nstruct Type(u32);\n\nenum Foo {\n    Bar(u32),\n}\nuse Foo::*;\n\nlet Type(x) = Type(12); // ok!\nmatch Type(12) {\n    Type(x) => {} // ok!\n    _ => {}\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/udiv.rs","byte_start":2827,"byte_end":2831,"line_start":92,"line_end":92,"column_start":20,"column_end":24,"is_primary":true,"text":[{"text":"            if let Some(rem) = rem {","highlight_start":20,"highlight_end":24}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0531]\u001b[0m\u001b[0m\u001b[1m: cannot find tuple struct or tuple variant `Some` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/udiv.rs:92:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if let Some(rem) = rem {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find trait `Copy` in this scope","code":{"code":"E0405","explanation":"The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/mod.rs","byte_start":271,"byte_end":275,"line_start":17,"line_end":17,"column_start":5,"column_end":9,"is_primary":true,"text":[{"text":"    Copy","highlight_start":5,"highlight_end":9}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0405]\u001b[0m\u001b[0m\u001b[1m: cannot find trait `Copy` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/mod.rs:17:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Copy\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find trait `PartialEq` in this scope","code":{"code":"E0405","explanation":"The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/mod.rs","byte_start":305,"byte_end":314,"line_start":19,"line_end":19,"column_start":7,"column_end":16,"is_primary":true,"text":[{"text":"    + PartialEq","highlight_start":7,"highlight_end":16}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0405]\u001b[0m\u001b[0m\u001b[1m: cannot find trait `PartialEq` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/mod.rs:19:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + PartialEq\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find trait `PartialOrd` in this scope","code":{"code":"E0405","explanation":"The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/mod.rs","byte_start":321,"byte_end":331,"line_start":20,"line_end":20,"column_start":7,"column_end":17,"is_primary":true,"text":[{"text":"    + PartialOrd","highlight_start":7,"highlight_end":17}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0405]\u001b[0m\u001b[0m\u001b[1m: cannot find trait `PartialOrd` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/mod.rs:20:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + PartialOrd\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find trait `Copy` in this scope","code":{"code":"E0405","explanation":"The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/mod.rs","byte_start":10791,"byte_end":10795,"line_start":361,"line_end":361,"column_start":30,"column_end":34,"is_primary":true,"text":[{"text":"pub(crate) trait CastInto<T: Copy>: Copy {","highlight_start":30,"highlight_end":34}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0405]\u001b[0m\u001b[0m\u001b[1m: cannot find trait `Copy` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/mod.rs:361:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m361\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait CastInto<T: Copy>: Copy {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find trait `Copy` in this scope","code":{"code":"E0405","explanation":"The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/mod.rs","byte_start":10798,"byte_end":10802,"line_start":361,"line_end":361,"column_start":37,"column_end":41,"is_primary":true,"text":[{"text":"pub(crate) trait CastInto<T: Copy>: Copy {","highlight_start":37,"highlight_end":41}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0405]\u001b[0m\u001b[0m\u001b[1m: cannot find trait `Copy` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/mod.rs:361:37\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m361\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub(crate) trait CastInto<T: Copy>: Copy {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find trait `Clone` in this scope","code":{"code":"E0405","explanation":"The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs","byte_start":4849,"byte_end":4854,"line_start":138,"line_end":138,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"        T: Clone + Copy + Eq,","highlight_start":12,"highlight_end":17}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0405]\u001b[0m\u001b[0m\u001b[1m: cannot find trait `Clone` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs:138:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        T: Clone + Copy + Eq,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find trait `Copy` in this scope","code":{"code":"E0405","explanation":"The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs","byte_start":4857,"byte_end":4861,"line_start":138,"line_end":138,"column_start":20,"column_end":24,"is_primary":true,"text":[{"text":"        T: Clone + Copy + Eq,","highlight_start":20,"highlight_end":24}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0405]\u001b[0m\u001b[0m\u001b[1m: cannot find trait `Copy` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs:138:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        T: Clone + Copy + Eq,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find trait `Eq` in this scope","code":{"code":"E0405","explanation":"The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs","byte_start":4864,"byte_end":4866,"line_start":138,"line_end":138,"column_start":27,"column_end":29,"is_primary":true,"text":[{"text":"        T: Clone + Copy + Eq,","highlight_start":27,"highlight_end":29}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0405]\u001b[0m\u001b[0m\u001b[1m: cannot find trait `Eq` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs:138:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        T: Clone + Copy + Eq,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find trait `Clone` in this scope","code":{"code":"E0405","explanation":"The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs","byte_start":4879,"byte_end":4884,"line_start":139,"line_end":139,"column_start":12,"column_end":17,"is_primary":true,"text":[{"text":"        U: Clone + Copy + Eq,","highlight_start":12,"highlight_end":17}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0405]\u001b[0m\u001b[0m\u001b[1m: cannot find trait `Clone` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs:139:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        U: Clone + Copy + Eq,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find trait `Copy` in this scope","code":{"code":"E0405","explanation":"The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs","byte_start":4887,"byte_end":4891,"line_start":139,"line_end":139,"column_start":20,"column_end":24,"is_primary":true,"text":[{"text":"        U: Clone + Copy + Eq,","highlight_start":20,"highlight_end":24}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0405]\u001b[0m\u001b[0m\u001b[1m: cannot find trait `Copy` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs:139:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        U: Clone + Copy + Eq,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find trait `Eq` in this scope","code":{"code":"E0405","explanation":"The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs","byte_start":4894,"byte_end":4896,"line_start":139,"line_end":139,"column_start":27,"column_end":29,"is_primary":true,"text":[{"text":"        U: Clone + Copy + Eq,","highlight_start":27,"highlight_end":29}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0405]\u001b[0m\u001b[0m\u001b[1m: cannot find trait `Eq` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs:139:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        U: Clone + Copy + Eq,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find trait `FnOnce` in this scope","code":{"code":"E0405","explanation":"The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs","byte_start":4909,"byte_end":4915,"line_start":140,"line_end":140,"column_start":12,"column_end":18,"is_primary":true,"text":[{"text":"        F: FnOnce(*const U, *const U, usize) -> i32,","highlight_start":12,"highlight_end":18}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0405]\u001b[0m\u001b[0m\u001b[1m: cannot find trait `FnOnce` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/x86_64.rs:140:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        F: FnOnce(*const U, *const U, usize) -> i32,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find trait `Copy` in this scope","code":{"code":"E0405","explanation":"The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/mod.rs","byte_start":2417,"byte_end":2421,"line_start":72,"line_end":72,"column_start":39,"column_end":43,"is_primary":true,"text":[{"text":"fn memcpy_element_unordered_atomic<T: Copy>(dest: *mut T, src: *const T, bytes: usize) {","highlight_start":39,"highlight_end":43}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0405]\u001b[0m\u001b[0m\u001b[1m: cannot find trait `Copy` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/mod.rs:72:39\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn memcpy_element_unordered_atomic<T: Copy>(dest: *mut T, src: *const T, bytes: usize) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find trait `Copy` in this scope","code":{"code":"E0405","explanation":"The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/mod.rs","byte_start":2869,"byte_end":2873,"line_start":85,"line_end":85,"column_start":40,"column_end":44,"is_primary":true,"text":[{"text":"fn memmove_element_unordered_atomic<T: Copy>(dest: *mut T, src: *const T, bytes: usize) {","highlight_start":40,"highlight_end":44}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0405]\u001b[0m\u001b[0m\u001b[1m: cannot find trait `Copy` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/mod.rs:85:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn memmove_element_unordered_atomic<T: Copy>(dest: *mut T, src: *const T, bytes: usize) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find trait `Copy` in this scope","code":{"code":"E0405","explanation":"The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/mod.rs","byte_start":3734,"byte_end":3738,"line_start":110,"line_end":110,"column_start":8,"column_end":12,"is_primary":true,"text":[{"text":"    T: Copy + From<u8> + Shl<u32, Output = T> + BitOr<T, Output = T>,","highlight_start":8,"highlight_end":12}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0405]\u001b[0m\u001b[0m\u001b[1m: cannot find trait `Copy` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/mod.rs:110:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Copy + From<u8> + Shl<u32, Output = T> + BitOr<T, Output = T>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find trait `From` in this scope","code":{"code":"E0405","explanation":"The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/mod.rs","byte_start":3741,"byte_end":3745,"line_start":110,"line_end":110,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"    T: Copy + From<u8> + Shl<u32, Output = T> + BitOr<T, Output = T>,","highlight_start":15,"highlight_end":19}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0405]\u001b[0m\u001b[0m\u001b[1m: cannot find trait `From` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/mem/mod.rs:110:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Copy + From<u8> + Shl<u32, Output = T> + BitOr<T, Output = T>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"`intrinsics` is ambiguous","code":{"code":"E0659","explanation":"An item usage is ambiguous.\n\nErroneous code example:\n\n```compile_fail,edition2018,E0659\npub mod moon {\n    pub fn foo() {}\n}\n\npub mod earth {\n    pub fn foo() {}\n}\n\nmod collider {\n    pub use crate::moon::*;\n    pub use crate::earth::*;\n}\n\nfn main() {\n    crate::collider::foo(); // ERROR: `foo` is ambiguous\n}\n```\n\nThis error generally appears when two items with the same name are imported into\na module. Here, the `foo` functions are imported and reexported from the\n`collider` module and therefore, when we're using `collider::foo()`, both\nfunctions collide.\n\nTo solve this error, the best solution is generally to keep the path before the\nitem when using it. Example:\n\n```edition2018\npub mod moon {\n    pub fn foo() {}\n}\n\npub mod earth {\n    pub fn foo() {}\n}\n\nmod collider {\n    pub use crate::moon;\n    pub use crate::earth;\n}\n\nfn main() {\n    crate::collider::moon::foo(); // ok!\n    crate::collider::earth::foo(); // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/x86_64.rs","byte_start":380,"byte_end":390,"line_start":11,"line_end":11,"column_start":1,"column_end":11,"is_primary":true,"text":[{"text":"intrinsics! {","highlight_start":1,"highlight_end":11}],"label":"ambiguous name","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"ambiguous because of a conflict between a `macro_rules` name and a non-`macro_rules` name from another module","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`intrinsics` could refer to the macro defined here","code":null,"level":"note","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/macros.rs","byte_start":3209,"byte_end":18120,"line_start":71,"line_end":532,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"macro_rules! intrinsics {","highlight_start":1,"highlight_end":26},{"text":"    () => ();","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Support cfg_attr:","highlight_start":1,"highlight_end":25},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[cfg_attr($e:meta, $($attr:tt)*)]","highlight_start":1,"highlight_end":43},{"text":"        $(#[$($attrs:tt)*])*","highlight_start":1,"highlight_end":29},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident: $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":90},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg($e)]","highlight_start":1,"highlight_end":19},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            #[$($attr)*]","highlight_start":1,"highlight_end":25},{"text":"            $(#[$($attrs)*])*","highlight_start":1,"highlight_end":30},{"text":"            pub extern $abi fn $name($($argname: $ty),*) $(-> $ret)? {","highlight_start":1,"highlight_end":71},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not($e))]","highlight_start":1,"highlight_end":24},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attrs)*])*","highlight_start":1,"highlight_end":30},{"text":"            pub extern $abi fn $name($($argname: $ty),*) $(-> $ret)? {","highlight_start":1,"highlight_end":71},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    // Same as above but for unsafe.","highlight_start":1,"highlight_end":37},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[cfg_attr($e:meta, $($attr:tt)*)]","highlight_start":1,"highlight_end":43},{"text":"        $(#[$($attrs:tt)*])*","highlight_start":1,"highlight_end":29},{"text":"        pub unsafe extern $abi:tt fn $name:ident( $($argname:ident: $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":97},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg($e)]","highlight_start":1,"highlight_end":19},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            #[$($attr)*]","highlight_start":1,"highlight_end":25},{"text":"            $(#[$($attrs)*])*","highlight_start":1,"highlight_end":30},{"text":"            pub unsafe extern $abi fn $name($($argname: $ty),*) $(-> $ret)? {","highlight_start":1,"highlight_end":78},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not($e))]","highlight_start":1,"highlight_end":24},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attrs)*])*","highlight_start":1,"highlight_end":30},{"text":"            pub unsafe extern $abi fn $name($($argname: $ty),*) $(-> $ret)? {","highlight_start":1,"highlight_end":78},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Explicit weak linkage gets dropped when weak-intrinsics is on since it","highlight_start":1,"highlight_end":78},{"text":"    // will be added unconditionally to all intrinsics and would conflict","highlight_start":1,"highlight_end":74},{"text":"    // otherwise.","highlight_start":1,"highlight_end":18},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[weak]","highlight_start":1,"highlight_end":16},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(feature = \"weak-intrinsics\")]","highlight_start":1,"highlight_end":44},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(feature = \"weak-intrinsics\"))]","highlight_start":1,"highlight_end":49},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            #[linkage = \"weak\"]","highlight_start":1,"highlight_end":32},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    // Same as above but for unsafe.","highlight_start":1,"highlight_end":37},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[weak]","highlight_start":1,"highlight_end":16},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub unsafe extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":98},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(feature = \"weak-intrinsics\")]","highlight_start":1,"highlight_end":44},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":80},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(feature = \"weak-intrinsics\"))]","highlight_start":1,"highlight_end":49},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            #[linkage = \"weak\"]","highlight_start":1,"highlight_end":32},{"text":"            pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":80},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Right now there's a bunch of architecture-optimized intrinsics in the","highlight_start":1,"highlight_end":77},{"text":"    // stock compiler-rt implementation. Not all of these have been ported over","highlight_start":1,"highlight_end":80},{"text":"    // to Rust yet so when the `c` feature of this crate is enabled we fall back","highlight_start":1,"highlight_end":81},{"text":"    // to the architecture-specific versions which should be more optimized. The","highlight_start":1,"highlight_end":81},{"text":"    // purpose of this macro is to easily allow specifying this.","highlight_start":1,"highlight_end":65},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // The `#[maybe_use_optimized_c_shim]` attribute indicates that this","highlight_start":1,"highlight_end":73},{"text":"    // intrinsic may have an optimized C version. In these situations the build","highlight_start":1,"highlight_end":80},{"text":"    // script, if the C code is enabled and compiled, will emit a cfg directive","highlight_start":1,"highlight_end":80},{"text":"    // to get passed to rustc for our compilation. If that cfg is set we skip","highlight_start":1,"highlight_end":78},{"text":"    // the Rust implementation, but if the attribute is not enabled then we","highlight_start":1,"highlight_end":76},{"text":"    // compile in the Rust implementation.","highlight_start":1,"highlight_end":43},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[maybe_use_optimized_c_shim]","highlight_start":1,"highlight_end":38},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub $(unsafe $(@ $empty:tt)? )? extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":119},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg($name = \"optimized-c\")]","highlight_start":1,"highlight_end":38},{"text":"        #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":67},{"text":"        pub $(unsafe $($empty)? )? extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":92},{"text":"            extern $abi {","highlight_start":1,"highlight_end":26},{"text":"                fn $name($($argname: $ty),*) $(-> $ret)?;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                $name($($argname),*)","highlight_start":1,"highlight_end":37},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not($name = \"optimized-c\"))]","highlight_start":1,"highlight_end":43},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub $(unsafe $($empty)? )? extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":96},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We recognize the `#[aapcs_on_arm]` attribute here and generate the","highlight_start":1,"highlight_end":74},{"text":"    // same intrinsic but force it to have the `\"aapcs\"` calling convention on","highlight_start":1,"highlight_end":79},{"text":"    // ARM and `\"C\"` elsewhere.","highlight_start":1,"highlight_end":32},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[aapcs_on_arm]","highlight_start":1,"highlight_end":24},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(target_arch = \"arm\")]","highlight_start":1,"highlight_end":36},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern \"aapcs\" fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":76},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(target_arch = \"arm\"))]","highlight_start":1,"highlight_end":41},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Like aapcs above we recognize an attribute for the \"unadjusted\" abi on","highlight_start":1,"highlight_end":78},{"text":"    // win64 for some methods.","highlight_start":1,"highlight_end":31},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[unadjusted_on_win64]","highlight_start":1,"highlight_end":31},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(all(any(windows, all(target_os = \"uefi\", target_arch = \"x86_64\")), target_pointer_width = \"64\"))]","highlight_start":1,"highlight_end":112},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern \"unadjusted\" fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":81},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(all(any(windows, all(target_os = \"uefi\", target_arch = \"x86_64\")), target_pointer_width = \"64\")))]","highlight_start":1,"highlight_end":117},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Some intrinsics on win64 which return a 128-bit integer have an.. unusual","highlight_start":1,"highlight_end":81},{"text":"    // calling convention. That's managed here with this \"abi hack\" which alters","highlight_start":1,"highlight_end":81},{"text":"    // the generated symbol's ABI.","highlight_start":1,"highlight_end":35},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // This will still define a function in this crate with the given name and","highlight_start":1,"highlight_end":79},{"text":"    // signature, but the actual symbol for the intrinsic may have a slightly","highlight_start":1,"highlight_end":78},{"text":"    // different ABI on win64.","highlight_start":1,"highlight_end":31},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[win64_128bit_abi_hack]","highlight_start":1,"highlight_end":33},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(all(any(windows, target_os = \"uefi\"), target_arch = \"x86_64\"))]","highlight_start":1,"highlight_end":78},{"text":"        $(#[$($attr)*])*","highlight_start":1,"highlight_end":25},{"text":"        #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":67},{"text":"        pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":69},{"text":"            $($body)*","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(all(any(windows, target_os = \"uefi\"), target_arch = \"x86_64\"))]","highlight_start":1,"highlight_end":78},{"text":"        pub mod $name {","highlight_start":1,"highlight_end":24},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":71},{"text":"            pub extern $abi fn $name( $($argname: $ty),* )","highlight_start":1,"highlight_end":59},{"text":"                -> $crate::macros::win64_128bit_abi_hack::U64x2","highlight_start":1,"highlight_end":64},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                let e: $($ret)? = super::$name($($argname),*);","highlight_start":1,"highlight_end":63},{"text":"                $crate::macros::win64_128bit_abi_hack::U64x2::from(e)","highlight_start":1,"highlight_end":70},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(all(any(windows, target_os = \"uefi\"), target_arch = \"x86_64\")))]","highlight_start":1,"highlight_end":83},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // A bunch of intrinsics on ARM are aliased in the standard compiler-rt","highlight_start":1,"highlight_end":76},{"text":"    // build under `__aeabi_*` aliases, and LLVM will call these instead of the","highlight_start":1,"highlight_end":80},{"text":"    // original function. The aliasing here is used to generate these symbols in","highlight_start":1,"highlight_end":81},{"text":"    // the object file.","highlight_start":1,"highlight_end":24},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[arm_aeabi_alias = $alias:ident]","highlight_start":1,"highlight_end":42},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(target_arch = \"arm\")]","highlight_start":1,"highlight_end":36},{"text":"        pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":69},{"text":"            $($body)*","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(target_arch = \"arm\")]","highlight_start":1,"highlight_end":36},{"text":"        pub mod $name {","highlight_start":1,"highlight_end":24},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":71},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                super::$name($($argname),*)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(target_arch = \"arm\")]","highlight_start":1,"highlight_end":36},{"text":"        pub mod $alias {","highlight_start":1,"highlight_end":25},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(any(all(not(windows), not(target_vendor=\"apple\")), feature = \"weak-intrinsics\"), linkage = \"weak\")]","highlight_start":1,"highlight_end":123},{"text":"            pub extern \"aapcs\" fn $alias( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":77},{"text":"                super::$name($($argname),*)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(target_arch = \"arm\"))]","highlight_start":1,"highlight_end":41},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // C mem* functions are only generated when the \"mem\" feature is enabled.","highlight_start":1,"highlight_end":78},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[mem_builtin]","highlight_start":1,"highlight_end":23},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub unsafe extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":98},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        $(#[$($attr)*])*","highlight_start":1,"highlight_end":25},{"text":"        pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":76},{"text":"            $($body)*","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(feature = \"mem\")]","highlight_start":1,"highlight_end":32},{"text":"        pub mod $name {","highlight_start":1,"highlight_end":24},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":71},{"text":"            pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":80},{"text":"                super::$name($($argname),*)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Naked functions are special: we can't generate wrappers for them since","highlight_start":1,"highlight_end":78},{"text":"    // they use a custom calling convention.","highlight_start":1,"highlight_end":45},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub unsafe extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":98},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        pub mod $name {","highlight_start":1,"highlight_end":24},{"text":"            #[naked]","highlight_start":1,"highlight_end":21},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":71},{"text":"            pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":80},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // For some intrinsics, AVR uses a custom calling convention¹ that does not","highlight_start":1,"highlight_end":80},{"text":"    // match our definitions here. Ideally we would just use hand-written naked","highlight_start":1,"highlight_end":80},{"text":"    // functions, but that's quite a lot of code to port² - so for the time","highlight_start":1,"highlight_end":76},{"text":"    // being we are just ignoring the problematic functions, letting avr-gcc","highlight_start":1,"highlight_end":77},{"text":"    // (which is required to compile to AVR anyway) link them from libgcc.","highlight_start":1,"highlight_end":75},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // ¹ https://gcc.gnu.org/wiki/avr-gcc (see \"Exceptions to the Calling","highlight_start":1,"highlight_end":74},{"text":"    //   Convention\")","highlight_start":1,"highlight_end":22},{"text":"    // ² https://github.com/gcc-mirror/gcc/blob/31048012db98f5ec9c2ba537bfd850374bdd771f/libgcc/config/avr/lib1funcs.S","highlight_start":1,"highlight_end":119},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[avr_skip]","highlight_start":1,"highlight_end":20},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(not(target_arch = \"avr\"))]","highlight_start":1,"highlight_end":41},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // This is the final catch-all rule. At this point we generate an","highlight_start":1,"highlight_end":70},{"text":"    // intrinsic with a conditional `#[no_mangle]` directive to avoid","highlight_start":1,"highlight_end":70},{"text":"    // interfering with duplicate symbols and whatnot during testing.","highlight_start":1,"highlight_end":70},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // The implementation is placed in a separate module, to take advantage","highlight_start":1,"highlight_end":76},{"text":"    // of the fact that rustc partitions functions into code generation","highlight_start":1,"highlight_end":72},{"text":"    // units based on module they are defined in. As a result we will have","highlight_start":1,"highlight_end":75},{"text":"    // a separate object file for each intrinsic. For further details see","highlight_start":1,"highlight_end":74},{"text":"    // corresponding PR in rustc https://github.com/rust-lang/rust/pull/70846","highlight_start":1,"highlight_end":78},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // After the intrinsic is defined we just continue with the rest of the","highlight_start":1,"highlight_end":76},{"text":"    // input we were given.","highlight_start":1,"highlight_end":28},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        $(#[$($attr)*])*","highlight_start":1,"highlight_end":25},{"text":"        pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":69},{"text":"            $($body)*","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub mod $name {","highlight_start":1,"highlight_end":24},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":71},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                super::$name($($argname),*)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Same as the above for unsafe functions.","highlight_start":1,"highlight_end":47},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub unsafe extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":98},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        $(#[$($attr)*])*","highlight_start":1,"highlight_end":25},{"text":"        pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":76},{"text":"            $($body)*","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub mod $name {","highlight_start":1,"highlight_end":24},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":71},{"text":"            pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":80},{"text":"                super::$name($($argname),*)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`intrinsics` could also refer to the unresolved item imported here","code":null,"level":"note","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/x86_64.rs","byte_start":31,"byte_end":47,"line_start":3,"line_end":3,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"use core::intrinsics;","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"use `self::intrinsics` to refer to this unresolved item unambiguously","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0659]\u001b[0m\u001b[0m\u001b[1m: `intrinsics` is ambiguous\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/x86_64.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mintrinsics! {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous name\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: ambiguous because of a conflict between a `macro_rules` name and a non-`macro_rules` name from another module\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `intrinsics` could refer to the macro defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/macros.rs:71:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mmacro_rules! intrinsics {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    () => ();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // Support cfg_attr:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m531\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m532\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `intrinsics` could also refer to the unresolved item imported here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/x86_64.rs:3:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse core::intrinsics;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: use `self::intrinsics` to refer to this unresolved item unambiguously\u001b[0m\n\n"}
{"message":"`intrinsics` is ambiguous","code":{"code":"E0659","explanation":"An item usage is ambiguous.\n\nErroneous code example:\n\n```compile_fail,edition2018,E0659\npub mod moon {\n    pub fn foo() {}\n}\n\npub mod earth {\n    pub fn foo() {}\n}\n\nmod collider {\n    pub use crate::moon::*;\n    pub use crate::earth::*;\n}\n\nfn main() {\n    crate::collider::foo(); // ERROR: `foo` is ambiguous\n}\n```\n\nThis error generally appears when two items with the same name are imported into\na module. Here, the `foo` functions are imported and reexported from the\n`collider` module and therefore, when we're using `collider::foo()`, both\nfunctions collide.\n\nTo solve this error, the best solution is generally to keep the path before the\nitem when using it. Example:\n\n```edition2018\npub mod moon {\n    pub fn foo() {}\n}\n\npub mod earth {\n    pub fn foo() {}\n}\n\nmod collider {\n    pub use crate::moon;\n    pub use crate::earth;\n}\n\nfn main() {\n    crate::collider::moon::foo(); // ok!\n    crate::collider::earth::foo(); // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/macros.rs","byte_start":14848,"byte_end":14858,"line_start":438,"line_end":438,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"        intrinsics!($($rest)*);","highlight_start":9,"highlight_end":19}],"label":"ambiguous name","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/x86_64.rs","byte_start":380,"byte_end":2673,"line_start":11,"line_end":82,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"intrinsics! {","highlight_start":1,"highlight_end":14},{"text":"    #[naked]","highlight_start":1,"highlight_end":13},{"text":"    #[cfg(all(","highlight_start":1,"highlight_end":15},{"text":"        any(all(windows, target_env = \"gnu\"), target_os = \"uefi\"),","highlight_start":1,"highlight_end":67},{"text":"        not(feature = \"no-asm\")","highlight_start":1,"highlight_end":32},{"text":"    ))]","highlight_start":1,"highlight_end":8},{"text":"    pub unsafe extern \"C\" fn ___chkstk_ms() {","highlight_start":1,"highlight_end":46},{"text":"        core::arch::asm!(","highlight_start":1,"highlight_end":26},{"text":"            \"push   %rcx\",","highlight_start":1,"highlight_end":27},{"text":"            \"push   %rax\",","highlight_start":1,"highlight_end":27},{"text":"            \"cmp    $0x1000,%rax\",","highlight_start":1,"highlight_end":35},{"text":"            \"lea    24(%rsp),%rcx\",","highlight_start":1,"highlight_end":36},{"text":"            \"jb     1f\",","highlight_start":1,"highlight_end":25},{"text":"            \"2:\",","highlight_start":1,"highlight_end":18},{"text":"            \"sub    $0x1000,%rcx\",","highlight_start":1,"highlight_end":35},{"text":"            \"test   %rcx,(%rcx)\",","highlight_start":1,"highlight_end":34},{"text":"            \"sub    $0x1000,%rax\",","highlight_start":1,"highlight_end":35},{"text":"            \"cmp    $0x1000,%rax\",","highlight_start":1,"highlight_end":35},{"text":"            \"ja     2b\",","highlight_start":1,"highlight_end":25},{"text":"            \"1:\",","highlight_start":1,"highlight_end":18},{"text":"            \"sub    %rax,%rcx\",","highlight_start":1,"highlight_end":32},{"text":"            \"test   %rcx,(%rcx)\",","highlight_start":1,"highlight_end":34},{"text":"            \"pop    %rax\",","highlight_start":1,"highlight_end":27},{"text":"            \"pop    %rcx\",","highlight_start":1,"highlight_end":27},{"text":"            \"ret\",","highlight_start":1,"highlight_end":19},{"text":"            options(noreturn, att_syntax)","highlight_start":1,"highlight_end":42},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[naked]","highlight_start":1,"highlight_end":13},{"text":"    #[cfg(all(","highlight_start":1,"highlight_end":15},{"text":"        any(all(windows, target_env = \"gnu\"), target_os = \"uefi\"),","highlight_start":1,"highlight_end":67},{"text":"        not(feature = \"no-asm\")","highlight_start":1,"highlight_end":32},{"text":"    ))]","highlight_start":1,"highlight_end":8},{"text":"    pub unsafe extern \"C\" fn __alloca() {","highlight_start":1,"highlight_end":42},{"text":"        core::arch::asm!(","highlight_start":1,"highlight_end":26},{"text":"            \"mov    %rcx,%rax\", // x64 _alloca is a normal function with parameter in rcx","highlight_start":1,"highlight_end":90},{"text":"            \"jmp    ___chkstk\", // Jump to ___chkstk since fallthrough may be unreliable\"","highlight_start":1,"highlight_end":90},{"text":"            options(noreturn, att_syntax)","highlight_start":1,"highlight_end":42},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[naked]","highlight_start":1,"highlight_end":13},{"text":"    #[cfg(all(","highlight_start":1,"highlight_end":15},{"text":"        any(all(windows, target_env = \"gnu\"), target_os = \"uefi\"),","highlight_start":1,"highlight_end":67},{"text":"        not(feature = \"no-asm\")","highlight_start":1,"highlight_end":32},{"text":"    ))]","highlight_start":1,"highlight_end":8},{"text":"    pub unsafe extern \"C\" fn ___chkstk() {","highlight_start":1,"highlight_end":43},{"text":"        core::arch::asm!(","highlight_start":1,"highlight_end":26},{"text":"            \"push   %rcx\",","highlight_start":1,"highlight_end":27},{"text":"            \"cmp    $0x1000,%rax\",","highlight_start":1,"highlight_end":35},{"text":"            \"lea    16(%rsp),%rcx\", // rsp before calling this routine -> rcx","highlight_start":1,"highlight_end":78},{"text":"            \"jb     1f\",","highlight_start":1,"highlight_end":25},{"text":"            \"2:\",","highlight_start":1,"highlight_end":18},{"text":"            \"sub    $0x1000,%rcx\",","highlight_start":1,"highlight_end":35},{"text":"            \"test   %rcx,(%rcx)\",","highlight_start":1,"highlight_end":34},{"text":"            \"sub    $0x1000,%rax\",","highlight_start":1,"highlight_end":35},{"text":"            \"cmp    $0x1000,%rax\",","highlight_start":1,"highlight_end":35},{"text":"            \"ja     2b\",","highlight_start":1,"highlight_end":25},{"text":"            \"1:\",","highlight_start":1,"highlight_end":18},{"text":"            \"sub    %rax,%rcx\",","highlight_start":1,"highlight_end":32},{"text":"            \"test   %rcx,(%rcx)\",","highlight_start":1,"highlight_end":34},{"text":"            \"lea    8(%rsp),%rax\",  // load pointer to the return address into rax","highlight_start":1,"highlight_end":83},{"text":"            \"mov    %rcx,%rsp\",     // install the new top of stack pointer into rsp","highlight_start":1,"highlight_end":85},{"text":"            \"mov    -8(%rax),%rcx\", // restore rcx","highlight_start":1,"highlight_end":51},{"text":"            \"push   (%rax)\",        // push return address onto the stack","highlight_start":1,"highlight_end":74},{"text":"            \"sub    %rsp,%rax\",     // restore the original value in rax","highlight_start":1,"highlight_end":73},{"text":"            \"ret\",","highlight_start":1,"highlight_end":19},{"text":"            options(noreturn, att_syntax)","highlight_start":1,"highlight_end":42},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"intrinsics!","def_site_span":{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/macros.rs","byte_start":3209,"byte_end":3232,"line_start":71,"line_end":71,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! intrinsics {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"ambiguous because of a conflict between a `macro_rules` name and a non-`macro_rules` name from another module","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`intrinsics` could refer to the macro defined here","code":null,"level":"note","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/macros.rs","byte_start":3209,"byte_end":18120,"line_start":71,"line_end":532,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"macro_rules! intrinsics {","highlight_start":1,"highlight_end":26},{"text":"    () => ();","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Support cfg_attr:","highlight_start":1,"highlight_end":25},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[cfg_attr($e:meta, $($attr:tt)*)]","highlight_start":1,"highlight_end":43},{"text":"        $(#[$($attrs:tt)*])*","highlight_start":1,"highlight_end":29},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident: $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":90},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg($e)]","highlight_start":1,"highlight_end":19},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            #[$($attr)*]","highlight_start":1,"highlight_end":25},{"text":"            $(#[$($attrs)*])*","highlight_start":1,"highlight_end":30},{"text":"            pub extern $abi fn $name($($argname: $ty),*) $(-> $ret)? {","highlight_start":1,"highlight_end":71},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not($e))]","highlight_start":1,"highlight_end":24},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attrs)*])*","highlight_start":1,"highlight_end":30},{"text":"            pub extern $abi fn $name($($argname: $ty),*) $(-> $ret)? {","highlight_start":1,"highlight_end":71},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    // Same as above but for unsafe.","highlight_start":1,"highlight_end":37},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[cfg_attr($e:meta, $($attr:tt)*)]","highlight_start":1,"highlight_end":43},{"text":"        $(#[$($attrs:tt)*])*","highlight_start":1,"highlight_end":29},{"text":"        pub unsafe extern $abi:tt fn $name:ident( $($argname:ident: $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":97},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg($e)]","highlight_start":1,"highlight_end":19},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            #[$($attr)*]","highlight_start":1,"highlight_end":25},{"text":"            $(#[$($attrs)*])*","highlight_start":1,"highlight_end":30},{"text":"            pub unsafe extern $abi fn $name($($argname: $ty),*) $(-> $ret)? {","highlight_start":1,"highlight_end":78},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not($e))]","highlight_start":1,"highlight_end":24},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attrs)*])*","highlight_start":1,"highlight_end":30},{"text":"            pub unsafe extern $abi fn $name($($argname: $ty),*) $(-> $ret)? {","highlight_start":1,"highlight_end":78},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Explicit weak linkage gets dropped when weak-intrinsics is on since it","highlight_start":1,"highlight_end":78},{"text":"    // will be added unconditionally to all intrinsics and would conflict","highlight_start":1,"highlight_end":74},{"text":"    // otherwise.","highlight_start":1,"highlight_end":18},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[weak]","highlight_start":1,"highlight_end":16},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(feature = \"weak-intrinsics\")]","highlight_start":1,"highlight_end":44},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(feature = \"weak-intrinsics\"))]","highlight_start":1,"highlight_end":49},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            #[linkage = \"weak\"]","highlight_start":1,"highlight_end":32},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    // Same as above but for unsafe.","highlight_start":1,"highlight_end":37},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[weak]","highlight_start":1,"highlight_end":16},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub unsafe extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":98},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(feature = \"weak-intrinsics\")]","highlight_start":1,"highlight_end":44},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":80},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(feature = \"weak-intrinsics\"))]","highlight_start":1,"highlight_end":49},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            #[linkage = \"weak\"]","highlight_start":1,"highlight_end":32},{"text":"            pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":80},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Right now there's a bunch of architecture-optimized intrinsics in the","highlight_start":1,"highlight_end":77},{"text":"    // stock compiler-rt implementation. Not all of these have been ported over","highlight_start":1,"highlight_end":80},{"text":"    // to Rust yet so when the `c` feature of this crate is enabled we fall back","highlight_start":1,"highlight_end":81},{"text":"    // to the architecture-specific versions which should be more optimized. The","highlight_start":1,"highlight_end":81},{"text":"    // purpose of this macro is to easily allow specifying this.","highlight_start":1,"highlight_end":65},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // The `#[maybe_use_optimized_c_shim]` attribute indicates that this","highlight_start":1,"highlight_end":73},{"text":"    // intrinsic may have an optimized C version. In these situations the build","highlight_start":1,"highlight_end":80},{"text":"    // script, if the C code is enabled and compiled, will emit a cfg directive","highlight_start":1,"highlight_end":80},{"text":"    // to get passed to rustc for our compilation. If that cfg is set we skip","highlight_start":1,"highlight_end":78},{"text":"    // the Rust implementation, but if the attribute is not enabled then we","highlight_start":1,"highlight_end":76},{"text":"    // compile in the Rust implementation.","highlight_start":1,"highlight_end":43},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[maybe_use_optimized_c_shim]","highlight_start":1,"highlight_end":38},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub $(unsafe $(@ $empty:tt)? )? extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":119},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg($name = \"optimized-c\")]","highlight_start":1,"highlight_end":38},{"text":"        #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":67},{"text":"        pub $(unsafe $($empty)? )? extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":92},{"text":"            extern $abi {","highlight_start":1,"highlight_end":26},{"text":"                fn $name($($argname: $ty),*) $(-> $ret)?;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                $name($($argname),*)","highlight_start":1,"highlight_end":37},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not($name = \"optimized-c\"))]","highlight_start":1,"highlight_end":43},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub $(unsafe $($empty)? )? extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":96},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We recognize the `#[aapcs_on_arm]` attribute here and generate the","highlight_start":1,"highlight_end":74},{"text":"    // same intrinsic but force it to have the `\"aapcs\"` calling convention on","highlight_start":1,"highlight_end":79},{"text":"    // ARM and `\"C\"` elsewhere.","highlight_start":1,"highlight_end":32},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[aapcs_on_arm]","highlight_start":1,"highlight_end":24},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(target_arch = \"arm\")]","highlight_start":1,"highlight_end":36},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern \"aapcs\" fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":76},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(target_arch = \"arm\"))]","highlight_start":1,"highlight_end":41},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Like aapcs above we recognize an attribute for the \"unadjusted\" abi on","highlight_start":1,"highlight_end":78},{"text":"    // win64 for some methods.","highlight_start":1,"highlight_end":31},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[unadjusted_on_win64]","highlight_start":1,"highlight_end":31},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(all(any(windows, all(target_os = \"uefi\", target_arch = \"x86_64\")), target_pointer_width = \"64\"))]","highlight_start":1,"highlight_end":112},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern \"unadjusted\" fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":81},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(all(any(windows, all(target_os = \"uefi\", target_arch = \"x86_64\")), target_pointer_width = \"64\")))]","highlight_start":1,"highlight_end":117},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Some intrinsics on win64 which return a 128-bit integer have an.. unusual","highlight_start":1,"highlight_end":81},{"text":"    // calling convention. That's managed here with this \"abi hack\" which alters","highlight_start":1,"highlight_end":81},{"text":"    // the generated symbol's ABI.","highlight_start":1,"highlight_end":35},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // This will still define a function in this crate with the given name and","highlight_start":1,"highlight_end":79},{"text":"    // signature, but the actual symbol for the intrinsic may have a slightly","highlight_start":1,"highlight_end":78},{"text":"    // different ABI on win64.","highlight_start":1,"highlight_end":31},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[win64_128bit_abi_hack]","highlight_start":1,"highlight_end":33},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(all(any(windows, target_os = \"uefi\"), target_arch = \"x86_64\"))]","highlight_start":1,"highlight_end":78},{"text":"        $(#[$($attr)*])*","highlight_start":1,"highlight_end":25},{"text":"        #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":67},{"text":"        pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":69},{"text":"            $($body)*","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(all(any(windows, target_os = \"uefi\"), target_arch = \"x86_64\"))]","highlight_start":1,"highlight_end":78},{"text":"        pub mod $name {","highlight_start":1,"highlight_end":24},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":71},{"text":"            pub extern $abi fn $name( $($argname: $ty),* )","highlight_start":1,"highlight_end":59},{"text":"                -> $crate::macros::win64_128bit_abi_hack::U64x2","highlight_start":1,"highlight_end":64},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                let e: $($ret)? = super::$name($($argname),*);","highlight_start":1,"highlight_end":63},{"text":"                $crate::macros::win64_128bit_abi_hack::U64x2::from(e)","highlight_start":1,"highlight_end":70},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(all(any(windows, target_os = \"uefi\"), target_arch = \"x86_64\")))]","highlight_start":1,"highlight_end":83},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // A bunch of intrinsics on ARM are aliased in the standard compiler-rt","highlight_start":1,"highlight_end":76},{"text":"    // build under `__aeabi_*` aliases, and LLVM will call these instead of the","highlight_start":1,"highlight_end":80},{"text":"    // original function. The aliasing here is used to generate these symbols in","highlight_start":1,"highlight_end":81},{"text":"    // the object file.","highlight_start":1,"highlight_end":24},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[arm_aeabi_alias = $alias:ident]","highlight_start":1,"highlight_end":42},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(target_arch = \"arm\")]","highlight_start":1,"highlight_end":36},{"text":"        pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":69},{"text":"            $($body)*","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(target_arch = \"arm\")]","highlight_start":1,"highlight_end":36},{"text":"        pub mod $name {","highlight_start":1,"highlight_end":24},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":71},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                super::$name($($argname),*)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(target_arch = \"arm\")]","highlight_start":1,"highlight_end":36},{"text":"        pub mod $alias {","highlight_start":1,"highlight_end":25},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(any(all(not(windows), not(target_vendor=\"apple\")), feature = \"weak-intrinsics\"), linkage = \"weak\")]","highlight_start":1,"highlight_end":123},{"text":"            pub extern \"aapcs\" fn $alias( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":77},{"text":"                super::$name($($argname),*)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(target_arch = \"arm\"))]","highlight_start":1,"highlight_end":41},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // C mem* functions are only generated when the \"mem\" feature is enabled.","highlight_start":1,"highlight_end":78},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[mem_builtin]","highlight_start":1,"highlight_end":23},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub unsafe extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":98},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        $(#[$($attr)*])*","highlight_start":1,"highlight_end":25},{"text":"        pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":76},{"text":"            $($body)*","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(feature = \"mem\")]","highlight_start":1,"highlight_end":32},{"text":"        pub mod $name {","highlight_start":1,"highlight_end":24},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":71},{"text":"            pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":80},{"text":"                super::$name($($argname),*)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Naked functions are special: we can't generate wrappers for them since","highlight_start":1,"highlight_end":78},{"text":"    // they use a custom calling convention.","highlight_start":1,"highlight_end":45},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub unsafe extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":98},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        pub mod $name {","highlight_start":1,"highlight_end":24},{"text":"            #[naked]","highlight_start":1,"highlight_end":21},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":71},{"text":"            pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":80},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // For some intrinsics, AVR uses a custom calling convention¹ that does not","highlight_start":1,"highlight_end":80},{"text":"    // match our definitions here. Ideally we would just use hand-written naked","highlight_start":1,"highlight_end":80},{"text":"    // functions, but that's quite a lot of code to port² - so for the time","highlight_start":1,"highlight_end":76},{"text":"    // being we are just ignoring the problematic functions, letting avr-gcc","highlight_start":1,"highlight_end":77},{"text":"    // (which is required to compile to AVR anyway) link them from libgcc.","highlight_start":1,"highlight_end":75},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // ¹ https://gcc.gnu.org/wiki/avr-gcc (see \"Exceptions to the Calling","highlight_start":1,"highlight_end":74},{"text":"    //   Convention\")","highlight_start":1,"highlight_end":22},{"text":"    // ² https://github.com/gcc-mirror/gcc/blob/31048012db98f5ec9c2ba537bfd850374bdd771f/libgcc/config/avr/lib1funcs.S","highlight_start":1,"highlight_end":119},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[avr_skip]","highlight_start":1,"highlight_end":20},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(not(target_arch = \"avr\"))]","highlight_start":1,"highlight_end":41},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // This is the final catch-all rule. At this point we generate an","highlight_start":1,"highlight_end":70},{"text":"    // intrinsic with a conditional `#[no_mangle]` directive to avoid","highlight_start":1,"highlight_end":70},{"text":"    // interfering with duplicate symbols and whatnot during testing.","highlight_start":1,"highlight_end":70},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // The implementation is placed in a separate module, to take advantage","highlight_start":1,"highlight_end":76},{"text":"    // of the fact that rustc partitions functions into code generation","highlight_start":1,"highlight_end":72},{"text":"    // units based on module they are defined in. As a result we will have","highlight_start":1,"highlight_end":75},{"text":"    // a separate object file for each intrinsic. For further details see","highlight_start":1,"highlight_end":74},{"text":"    // corresponding PR in rustc https://github.com/rust-lang/rust/pull/70846","highlight_start":1,"highlight_end":78},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // After the intrinsic is defined we just continue with the rest of the","highlight_start":1,"highlight_end":76},{"text":"    // input we were given.","highlight_start":1,"highlight_end":28},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        $(#[$($attr)*])*","highlight_start":1,"highlight_end":25},{"text":"        pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":69},{"text":"            $($body)*","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub mod $name {","highlight_start":1,"highlight_end":24},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":71},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                super::$name($($argname),*)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Same as the above for unsafe functions.","highlight_start":1,"highlight_end":47},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub unsafe extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":98},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        $(#[$($attr)*])*","highlight_start":1,"highlight_end":25},{"text":"        pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":76},{"text":"            $($body)*","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub mod $name {","highlight_start":1,"highlight_end":24},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":71},{"text":"            pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":80},{"text":"                super::$name($($argname),*)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`intrinsics` could also refer to the unresolved item imported here","code":null,"level":"note","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/x86_64.rs","byte_start":31,"byte_end":47,"line_start":3,"line_end":3,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"use core::intrinsics;","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"use `self::intrinsics` to refer to this unresolved item unambiguously","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0659]\u001b[0m\u001b[0m\u001b[1m: `intrinsics` is ambiguous\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/macros.rs:438:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        intrinsics!($($rest)*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous name\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/x86_64.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mintrinsics! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[naked]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        any(all(windows, target_env = \"gnu\"), target_os = \"uefi\"),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: ambiguous because of a conflict between a `macro_rules` name and a non-`macro_rules` name from another module\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `intrinsics` could refer to the macro defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/macros.rs:71:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mmacro_rules! intrinsics {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    () => ();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // Support cfg_attr:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m531\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m532\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `intrinsics` could also refer to the unresolved item imported here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/x86_64.rs:3:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse core::intrinsics;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: use `self::intrinsics` to refer to this unresolved item unambiguously\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `intrinsics` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`intrinsics` is ambiguous","code":{"code":"E0659","explanation":"An item usage is ambiguous.\n\nErroneous code example:\n\n```compile_fail,edition2018,E0659\npub mod moon {\n    pub fn foo() {}\n}\n\npub mod earth {\n    pub fn foo() {}\n}\n\nmod collider {\n    pub use crate::moon::*;\n    pub use crate::earth::*;\n}\n\nfn main() {\n    crate::collider::foo(); // ERROR: `foo` is ambiguous\n}\n```\n\nThis error generally appears when two items with the same name are imported into\na module. Here, the `foo` functions are imported and reexported from the\n`collider` module and therefore, when we're using `collider::foo()`, both\nfunctions collide.\n\nTo solve this error, the best solution is generally to keep the path before the\nitem when using it. Example:\n\n```edition2018\npub mod moon {\n    pub fn foo() {}\n}\n\npub mod earth {\n    pub fn foo() {}\n}\n\nmod collider {\n    pub use crate::moon;\n    pub use crate::earth;\n}\n\nfn main() {\n    crate::collider::moon::foo(); // ok!\n    crate::collider::earth::foo(); // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/macros.rs","byte_start":14848,"byte_end":14858,"line_start":438,"line_end":438,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"        intrinsics!($($rest)*);","highlight_start":9,"highlight_end":19}],"label":"ambiguous name","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/macros.rs","byte_start":14848,"byte_end":14870,"line_start":438,"line_end":438,"column_start":9,"column_end":31,"is_primary":false,"text":[{"text":"        intrinsics!($($rest)*);","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/x86_64.rs","byte_start":380,"byte_end":2673,"line_start":11,"line_end":82,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"intrinsics! {","highlight_start":1,"highlight_end":14},{"text":"    #[naked]","highlight_start":1,"highlight_end":13},{"text":"    #[cfg(all(","highlight_start":1,"highlight_end":15},{"text":"        any(all(windows, target_env = \"gnu\"), target_os = \"uefi\"),","highlight_start":1,"highlight_end":67},{"text":"        not(feature = \"no-asm\")","highlight_start":1,"highlight_end":32},{"text":"    ))]","highlight_start":1,"highlight_end":8},{"text":"    pub unsafe extern \"C\" fn ___chkstk_ms() {","highlight_start":1,"highlight_end":46},{"text":"        core::arch::asm!(","highlight_start":1,"highlight_end":26},{"text":"            \"push   %rcx\",","highlight_start":1,"highlight_end":27},{"text":"            \"push   %rax\",","highlight_start":1,"highlight_end":27},{"text":"            \"cmp    $0x1000,%rax\",","highlight_start":1,"highlight_end":35},{"text":"            \"lea    24(%rsp),%rcx\",","highlight_start":1,"highlight_end":36},{"text":"            \"jb     1f\",","highlight_start":1,"highlight_end":25},{"text":"            \"2:\",","highlight_start":1,"highlight_end":18},{"text":"            \"sub    $0x1000,%rcx\",","highlight_start":1,"highlight_end":35},{"text":"            \"test   %rcx,(%rcx)\",","highlight_start":1,"highlight_end":34},{"text":"            \"sub    $0x1000,%rax\",","highlight_start":1,"highlight_end":35},{"text":"            \"cmp    $0x1000,%rax\",","highlight_start":1,"highlight_end":35},{"text":"            \"ja     2b\",","highlight_start":1,"highlight_end":25},{"text":"            \"1:\",","highlight_start":1,"highlight_end":18},{"text":"            \"sub    %rax,%rcx\",","highlight_start":1,"highlight_end":32},{"text":"            \"test   %rcx,(%rcx)\",","highlight_start":1,"highlight_end":34},{"text":"            \"pop    %rax\",","highlight_start":1,"highlight_end":27},{"text":"            \"pop    %rcx\",","highlight_start":1,"highlight_end":27},{"text":"            \"ret\",","highlight_start":1,"highlight_end":19},{"text":"            options(noreturn, att_syntax)","highlight_start":1,"highlight_end":42},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[naked]","highlight_start":1,"highlight_end":13},{"text":"    #[cfg(all(","highlight_start":1,"highlight_end":15},{"text":"        any(all(windows, target_env = \"gnu\"), target_os = \"uefi\"),","highlight_start":1,"highlight_end":67},{"text":"        not(feature = \"no-asm\")","highlight_start":1,"highlight_end":32},{"text":"    ))]","highlight_start":1,"highlight_end":8},{"text":"    pub unsafe extern \"C\" fn __alloca() {","highlight_start":1,"highlight_end":42},{"text":"        core::arch::asm!(","highlight_start":1,"highlight_end":26},{"text":"            \"mov    %rcx,%rax\", // x64 _alloca is a normal function with parameter in rcx","highlight_start":1,"highlight_end":90},{"text":"            \"jmp    ___chkstk\", // Jump to ___chkstk since fallthrough may be unreliable\"","highlight_start":1,"highlight_end":90},{"text":"            options(noreturn, att_syntax)","highlight_start":1,"highlight_end":42},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[naked]","highlight_start":1,"highlight_end":13},{"text":"    #[cfg(all(","highlight_start":1,"highlight_end":15},{"text":"        any(all(windows, target_env = \"gnu\"), target_os = \"uefi\"),","highlight_start":1,"highlight_end":67},{"text":"        not(feature = \"no-asm\")","highlight_start":1,"highlight_end":32},{"text":"    ))]","highlight_start":1,"highlight_end":8},{"text":"    pub unsafe extern \"C\" fn ___chkstk() {","highlight_start":1,"highlight_end":43},{"text":"        core::arch::asm!(","highlight_start":1,"highlight_end":26},{"text":"            \"push   %rcx\",","highlight_start":1,"highlight_end":27},{"text":"            \"cmp    $0x1000,%rax\",","highlight_start":1,"highlight_end":35},{"text":"            \"lea    16(%rsp),%rcx\", // rsp before calling this routine -> rcx","highlight_start":1,"highlight_end":78},{"text":"            \"jb     1f\",","highlight_start":1,"highlight_end":25},{"text":"            \"2:\",","highlight_start":1,"highlight_end":18},{"text":"            \"sub    $0x1000,%rcx\",","highlight_start":1,"highlight_end":35},{"text":"            \"test   %rcx,(%rcx)\",","highlight_start":1,"highlight_end":34},{"text":"            \"sub    $0x1000,%rax\",","highlight_start":1,"highlight_end":35},{"text":"            \"cmp    $0x1000,%rax\",","highlight_start":1,"highlight_end":35},{"text":"            \"ja     2b\",","highlight_start":1,"highlight_end":25},{"text":"            \"1:\",","highlight_start":1,"highlight_end":18},{"text":"            \"sub    %rax,%rcx\",","highlight_start":1,"highlight_end":32},{"text":"            \"test   %rcx,(%rcx)\",","highlight_start":1,"highlight_end":34},{"text":"            \"lea    8(%rsp),%rax\",  // load pointer to the return address into rax","highlight_start":1,"highlight_end":83},{"text":"            \"mov    %rcx,%rsp\",     // install the new top of stack pointer into rsp","highlight_start":1,"highlight_end":85},{"text":"            \"mov    -8(%rax),%rcx\", // restore rcx","highlight_start":1,"highlight_end":51},{"text":"            \"push   (%rax)\",        // push return address onto the stack","highlight_start":1,"highlight_end":74},{"text":"            \"sub    %rsp,%rax\",     // restore the original value in rax","highlight_start":1,"highlight_end":73},{"text":"            \"ret\",","highlight_start":1,"highlight_end":19},{"text":"            options(noreturn, att_syntax)","highlight_start":1,"highlight_end":42},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"intrinsics!","def_site_span":{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/macros.rs","byte_start":3209,"byte_end":3232,"line_start":71,"line_end":71,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! intrinsics {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"intrinsics!","def_site_span":{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/macros.rs","byte_start":3209,"byte_end":3232,"line_start":71,"line_end":71,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! intrinsics {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"ambiguous because of a conflict between a `macro_rules` name and a non-`macro_rules` name from another module","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`intrinsics` could refer to the macro defined here","code":null,"level":"note","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/macros.rs","byte_start":3209,"byte_end":18120,"line_start":71,"line_end":532,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"macro_rules! intrinsics {","highlight_start":1,"highlight_end":26},{"text":"    () => ();","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Support cfg_attr:","highlight_start":1,"highlight_end":25},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[cfg_attr($e:meta, $($attr:tt)*)]","highlight_start":1,"highlight_end":43},{"text":"        $(#[$($attrs:tt)*])*","highlight_start":1,"highlight_end":29},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident: $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":90},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg($e)]","highlight_start":1,"highlight_end":19},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            #[$($attr)*]","highlight_start":1,"highlight_end":25},{"text":"            $(#[$($attrs)*])*","highlight_start":1,"highlight_end":30},{"text":"            pub extern $abi fn $name($($argname: $ty),*) $(-> $ret)? {","highlight_start":1,"highlight_end":71},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not($e))]","highlight_start":1,"highlight_end":24},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attrs)*])*","highlight_start":1,"highlight_end":30},{"text":"            pub extern $abi fn $name($($argname: $ty),*) $(-> $ret)? {","highlight_start":1,"highlight_end":71},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    // Same as above but for unsafe.","highlight_start":1,"highlight_end":37},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[cfg_attr($e:meta, $($attr:tt)*)]","highlight_start":1,"highlight_end":43},{"text":"        $(#[$($attrs:tt)*])*","highlight_start":1,"highlight_end":29},{"text":"        pub unsafe extern $abi:tt fn $name:ident( $($argname:ident: $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":97},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg($e)]","highlight_start":1,"highlight_end":19},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            #[$($attr)*]","highlight_start":1,"highlight_end":25},{"text":"            $(#[$($attrs)*])*","highlight_start":1,"highlight_end":30},{"text":"            pub unsafe extern $abi fn $name($($argname: $ty),*) $(-> $ret)? {","highlight_start":1,"highlight_end":78},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not($e))]","highlight_start":1,"highlight_end":24},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attrs)*])*","highlight_start":1,"highlight_end":30},{"text":"            pub unsafe extern $abi fn $name($($argname: $ty),*) $(-> $ret)? {","highlight_start":1,"highlight_end":78},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Explicit weak linkage gets dropped when weak-intrinsics is on since it","highlight_start":1,"highlight_end":78},{"text":"    // will be added unconditionally to all intrinsics and would conflict","highlight_start":1,"highlight_end":74},{"text":"    // otherwise.","highlight_start":1,"highlight_end":18},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[weak]","highlight_start":1,"highlight_end":16},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(feature = \"weak-intrinsics\")]","highlight_start":1,"highlight_end":44},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(feature = \"weak-intrinsics\"))]","highlight_start":1,"highlight_end":49},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            #[linkage = \"weak\"]","highlight_start":1,"highlight_end":32},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    // Same as above but for unsafe.","highlight_start":1,"highlight_end":37},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[weak]","highlight_start":1,"highlight_end":16},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub unsafe extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":98},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(feature = \"weak-intrinsics\")]","highlight_start":1,"highlight_end":44},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":80},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(feature = \"weak-intrinsics\"))]","highlight_start":1,"highlight_end":49},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            #[linkage = \"weak\"]","highlight_start":1,"highlight_end":32},{"text":"            pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":80},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Right now there's a bunch of architecture-optimized intrinsics in the","highlight_start":1,"highlight_end":77},{"text":"    // stock compiler-rt implementation. Not all of these have been ported over","highlight_start":1,"highlight_end":80},{"text":"    // to Rust yet so when the `c` feature of this crate is enabled we fall back","highlight_start":1,"highlight_end":81},{"text":"    // to the architecture-specific versions which should be more optimized. The","highlight_start":1,"highlight_end":81},{"text":"    // purpose of this macro is to easily allow specifying this.","highlight_start":1,"highlight_end":65},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // The `#[maybe_use_optimized_c_shim]` attribute indicates that this","highlight_start":1,"highlight_end":73},{"text":"    // intrinsic may have an optimized C version. In these situations the build","highlight_start":1,"highlight_end":80},{"text":"    // script, if the C code is enabled and compiled, will emit a cfg directive","highlight_start":1,"highlight_end":80},{"text":"    // to get passed to rustc for our compilation. If that cfg is set we skip","highlight_start":1,"highlight_end":78},{"text":"    // the Rust implementation, but if the attribute is not enabled then we","highlight_start":1,"highlight_end":76},{"text":"    // compile in the Rust implementation.","highlight_start":1,"highlight_end":43},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[maybe_use_optimized_c_shim]","highlight_start":1,"highlight_end":38},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub $(unsafe $(@ $empty:tt)? )? extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":119},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg($name = \"optimized-c\")]","highlight_start":1,"highlight_end":38},{"text":"        #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":67},{"text":"        pub $(unsafe $($empty)? )? extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":92},{"text":"            extern $abi {","highlight_start":1,"highlight_end":26},{"text":"                fn $name($($argname: $ty),*) $(-> $ret)?;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                $name($($argname),*)","highlight_start":1,"highlight_end":37},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not($name = \"optimized-c\"))]","highlight_start":1,"highlight_end":43},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub $(unsafe $($empty)? )? extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":96},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We recognize the `#[aapcs_on_arm]` attribute here and generate the","highlight_start":1,"highlight_end":74},{"text":"    // same intrinsic but force it to have the `\"aapcs\"` calling convention on","highlight_start":1,"highlight_end":79},{"text":"    // ARM and `\"C\"` elsewhere.","highlight_start":1,"highlight_end":32},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[aapcs_on_arm]","highlight_start":1,"highlight_end":24},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(target_arch = \"arm\")]","highlight_start":1,"highlight_end":36},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern \"aapcs\" fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":76},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(target_arch = \"arm\"))]","highlight_start":1,"highlight_end":41},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Like aapcs above we recognize an attribute for the \"unadjusted\" abi on","highlight_start":1,"highlight_end":78},{"text":"    // win64 for some methods.","highlight_start":1,"highlight_end":31},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[unadjusted_on_win64]","highlight_start":1,"highlight_end":31},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(all(any(windows, all(target_os = \"uefi\", target_arch = \"x86_64\")), target_pointer_width = \"64\"))]","highlight_start":1,"highlight_end":112},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern \"unadjusted\" fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":81},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(all(any(windows, all(target_os = \"uefi\", target_arch = \"x86_64\")), target_pointer_width = \"64\")))]","highlight_start":1,"highlight_end":117},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Some intrinsics on win64 which return a 128-bit integer have an.. unusual","highlight_start":1,"highlight_end":81},{"text":"    // calling convention. That's managed here with this \"abi hack\" which alters","highlight_start":1,"highlight_end":81},{"text":"    // the generated symbol's ABI.","highlight_start":1,"highlight_end":35},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // This will still define a function in this crate with the given name and","highlight_start":1,"highlight_end":79},{"text":"    // signature, but the actual symbol for the intrinsic may have a slightly","highlight_start":1,"highlight_end":78},{"text":"    // different ABI on win64.","highlight_start":1,"highlight_end":31},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[win64_128bit_abi_hack]","highlight_start":1,"highlight_end":33},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(all(any(windows, target_os = \"uefi\"), target_arch = \"x86_64\"))]","highlight_start":1,"highlight_end":78},{"text":"        $(#[$($attr)*])*","highlight_start":1,"highlight_end":25},{"text":"        #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":67},{"text":"        pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":69},{"text":"            $($body)*","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(all(any(windows, target_os = \"uefi\"), target_arch = \"x86_64\"))]","highlight_start":1,"highlight_end":78},{"text":"        pub mod $name {","highlight_start":1,"highlight_end":24},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":71},{"text":"            pub extern $abi fn $name( $($argname: $ty),* )","highlight_start":1,"highlight_end":59},{"text":"                -> $crate::macros::win64_128bit_abi_hack::U64x2","highlight_start":1,"highlight_end":64},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                let e: $($ret)? = super::$name($($argname),*);","highlight_start":1,"highlight_end":63},{"text":"                $crate::macros::win64_128bit_abi_hack::U64x2::from(e)","highlight_start":1,"highlight_end":70},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(all(any(windows, target_os = \"uefi\"), target_arch = \"x86_64\")))]","highlight_start":1,"highlight_end":83},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // A bunch of intrinsics on ARM are aliased in the standard compiler-rt","highlight_start":1,"highlight_end":76},{"text":"    // build under `__aeabi_*` aliases, and LLVM will call these instead of the","highlight_start":1,"highlight_end":80},{"text":"    // original function. The aliasing here is used to generate these symbols in","highlight_start":1,"highlight_end":81},{"text":"    // the object file.","highlight_start":1,"highlight_end":24},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[arm_aeabi_alias = $alias:ident]","highlight_start":1,"highlight_end":42},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(target_arch = \"arm\")]","highlight_start":1,"highlight_end":36},{"text":"        pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":69},{"text":"            $($body)*","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(target_arch = \"arm\")]","highlight_start":1,"highlight_end":36},{"text":"        pub mod $name {","highlight_start":1,"highlight_end":24},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":71},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                super::$name($($argname),*)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(target_arch = \"arm\")]","highlight_start":1,"highlight_end":36},{"text":"        pub mod $alias {","highlight_start":1,"highlight_end":25},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(any(all(not(windows), not(target_vendor=\"apple\")), feature = \"weak-intrinsics\"), linkage = \"weak\")]","highlight_start":1,"highlight_end":123},{"text":"            pub extern \"aapcs\" fn $alias( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":77},{"text":"                super::$name($($argname),*)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(target_arch = \"arm\"))]","highlight_start":1,"highlight_end":41},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // C mem* functions are only generated when the \"mem\" feature is enabled.","highlight_start":1,"highlight_end":78},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[mem_builtin]","highlight_start":1,"highlight_end":23},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub unsafe extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":98},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        $(#[$($attr)*])*","highlight_start":1,"highlight_end":25},{"text":"        pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":76},{"text":"            $($body)*","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(feature = \"mem\")]","highlight_start":1,"highlight_end":32},{"text":"        pub mod $name {","highlight_start":1,"highlight_end":24},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":71},{"text":"            pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":80},{"text":"                super::$name($($argname),*)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Naked functions are special: we can't generate wrappers for them since","highlight_start":1,"highlight_end":78},{"text":"    // they use a custom calling convention.","highlight_start":1,"highlight_end":45},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub unsafe extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":98},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        pub mod $name {","highlight_start":1,"highlight_end":24},{"text":"            #[naked]","highlight_start":1,"highlight_end":21},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":71},{"text":"            pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":80},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // For some intrinsics, AVR uses a custom calling convention¹ that does not","highlight_start":1,"highlight_end":80},{"text":"    // match our definitions here. Ideally we would just use hand-written naked","highlight_start":1,"highlight_end":80},{"text":"    // functions, but that's quite a lot of code to port² - so for the time","highlight_start":1,"highlight_end":76},{"text":"    // being we are just ignoring the problematic functions, letting avr-gcc","highlight_start":1,"highlight_end":77},{"text":"    // (which is required to compile to AVR anyway) link them from libgcc.","highlight_start":1,"highlight_end":75},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // ¹ https://gcc.gnu.org/wiki/avr-gcc (see \"Exceptions to the Calling","highlight_start":1,"highlight_end":74},{"text":"    //   Convention\")","highlight_start":1,"highlight_end":22},{"text":"    // ² https://github.com/gcc-mirror/gcc/blob/31048012db98f5ec9c2ba537bfd850374bdd771f/libgcc/config/avr/lib1funcs.S","highlight_start":1,"highlight_end":119},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[avr_skip]","highlight_start":1,"highlight_end":20},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(not(target_arch = \"avr\"))]","highlight_start":1,"highlight_end":41},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // This is the final catch-all rule. At this point we generate an","highlight_start":1,"highlight_end":70},{"text":"    // intrinsic with a conditional `#[no_mangle]` directive to avoid","highlight_start":1,"highlight_end":70},{"text":"    // interfering with duplicate symbols and whatnot during testing.","highlight_start":1,"highlight_end":70},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // The implementation is placed in a separate module, to take advantage","highlight_start":1,"highlight_end":76},{"text":"    // of the fact that rustc partitions functions into code generation","highlight_start":1,"highlight_end":72},{"text":"    // units based on module they are defined in. As a result we will have","highlight_start":1,"highlight_end":75},{"text":"    // a separate object file for each intrinsic. For further details see","highlight_start":1,"highlight_end":74},{"text":"    // corresponding PR in rustc https://github.com/rust-lang/rust/pull/70846","highlight_start":1,"highlight_end":78},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // After the intrinsic is defined we just continue with the rest of the","highlight_start":1,"highlight_end":76},{"text":"    // input we were given.","highlight_start":1,"highlight_end":28},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        $(#[$($attr)*])*","highlight_start":1,"highlight_end":25},{"text":"        pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":69},{"text":"            $($body)*","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub mod $name {","highlight_start":1,"highlight_end":24},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":71},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                super::$name($($argname),*)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Same as the above for unsafe functions.","highlight_start":1,"highlight_end":47},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub unsafe extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":98},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        $(#[$($attr)*])*","highlight_start":1,"highlight_end":25},{"text":"        pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":76},{"text":"            $($body)*","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub mod $name {","highlight_start":1,"highlight_end":24},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":71},{"text":"            pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":80},{"text":"                super::$name($($argname),*)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`intrinsics` could also refer to the unresolved item imported here","code":null,"level":"note","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/x86_64.rs","byte_start":31,"byte_end":47,"line_start":3,"line_end":3,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"use core::intrinsics;","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"use `self::intrinsics` to refer to this unresolved item unambiguously","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0659]\u001b[0m\u001b[0m\u001b[1m: `intrinsics` is ambiguous\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/macros.rs:438:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        intrinsics!($($rest)*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous name\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/x86_64.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mintrinsics! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[naked]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        any(all(windows, target_env = \"gnu\"), target_os = \"uefi\"),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: ambiguous because of a conflict between a `macro_rules` name and a non-`macro_rules` name from another module\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `intrinsics` could refer to the macro defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/macros.rs:71:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mmacro_rules! intrinsics {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    () => ();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // Support cfg_attr:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m531\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m532\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `intrinsics` could also refer to the unresolved item imported here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/x86_64.rs:3:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse core::intrinsics;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: use `self::intrinsics` to refer to this unresolved item unambiguously\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `intrinsics` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`intrinsics` is ambiguous","code":{"code":"E0659","explanation":"An item usage is ambiguous.\n\nErroneous code example:\n\n```compile_fail,edition2018,E0659\npub mod moon {\n    pub fn foo() {}\n}\n\npub mod earth {\n    pub fn foo() {}\n}\n\nmod collider {\n    pub use crate::moon::*;\n    pub use crate::earth::*;\n}\n\nfn main() {\n    crate::collider::foo(); // ERROR: `foo` is ambiguous\n}\n```\n\nThis error generally appears when two items with the same name are imported into\na module. Here, the `foo` functions are imported and reexported from the\n`collider` module and therefore, when we're using `collider::foo()`, both\nfunctions collide.\n\nTo solve this error, the best solution is generally to keep the path before the\nitem when using it. Example:\n\n```edition2018\npub mod moon {\n    pub fn foo() {}\n}\n\npub mod earth {\n    pub fn foo() {}\n}\n\nmod collider {\n    pub use crate::moon;\n    pub use crate::earth;\n}\n\nfn main() {\n    crate::collider::moon::foo(); // ok!\n    crate::collider::earth::foo(); // ok!\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/macros.rs","byte_start":14848,"byte_end":14858,"line_start":438,"line_end":438,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"        intrinsics!($($rest)*);","highlight_start":9,"highlight_end":19}],"label":"ambiguous name","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/macros.rs","byte_start":14848,"byte_end":14870,"line_start":438,"line_end":438,"column_start":9,"column_end":31,"is_primary":false,"text":[{"text":"        intrinsics!($($rest)*);","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/macros.rs","byte_start":14848,"byte_end":14870,"line_start":438,"line_end":438,"column_start":9,"column_end":31,"is_primary":false,"text":[{"text":"        intrinsics!($($rest)*);","highlight_start":9,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/x86_64.rs","byte_start":380,"byte_end":2673,"line_start":11,"line_end":82,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"intrinsics! {","highlight_start":1,"highlight_end":14},{"text":"    #[naked]","highlight_start":1,"highlight_end":13},{"text":"    #[cfg(all(","highlight_start":1,"highlight_end":15},{"text":"        any(all(windows, target_env = \"gnu\"), target_os = \"uefi\"),","highlight_start":1,"highlight_end":67},{"text":"        not(feature = \"no-asm\")","highlight_start":1,"highlight_end":32},{"text":"    ))]","highlight_start":1,"highlight_end":8},{"text":"    pub unsafe extern \"C\" fn ___chkstk_ms() {","highlight_start":1,"highlight_end":46},{"text":"        core::arch::asm!(","highlight_start":1,"highlight_end":26},{"text":"            \"push   %rcx\",","highlight_start":1,"highlight_end":27},{"text":"            \"push   %rax\",","highlight_start":1,"highlight_end":27},{"text":"            \"cmp    $0x1000,%rax\",","highlight_start":1,"highlight_end":35},{"text":"            \"lea    24(%rsp),%rcx\",","highlight_start":1,"highlight_end":36},{"text":"            \"jb     1f\",","highlight_start":1,"highlight_end":25},{"text":"            \"2:\",","highlight_start":1,"highlight_end":18},{"text":"            \"sub    $0x1000,%rcx\",","highlight_start":1,"highlight_end":35},{"text":"            \"test   %rcx,(%rcx)\",","highlight_start":1,"highlight_end":34},{"text":"            \"sub    $0x1000,%rax\",","highlight_start":1,"highlight_end":35},{"text":"            \"cmp    $0x1000,%rax\",","highlight_start":1,"highlight_end":35},{"text":"            \"ja     2b\",","highlight_start":1,"highlight_end":25},{"text":"            \"1:\",","highlight_start":1,"highlight_end":18},{"text":"            \"sub    %rax,%rcx\",","highlight_start":1,"highlight_end":32},{"text":"            \"test   %rcx,(%rcx)\",","highlight_start":1,"highlight_end":34},{"text":"            \"pop    %rax\",","highlight_start":1,"highlight_end":27},{"text":"            \"pop    %rcx\",","highlight_start":1,"highlight_end":27},{"text":"            \"ret\",","highlight_start":1,"highlight_end":19},{"text":"            options(noreturn, att_syntax)","highlight_start":1,"highlight_end":42},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[naked]","highlight_start":1,"highlight_end":13},{"text":"    #[cfg(all(","highlight_start":1,"highlight_end":15},{"text":"        any(all(windows, target_env = \"gnu\"), target_os = \"uefi\"),","highlight_start":1,"highlight_end":67},{"text":"        not(feature = \"no-asm\")","highlight_start":1,"highlight_end":32},{"text":"    ))]","highlight_start":1,"highlight_end":8},{"text":"    pub unsafe extern \"C\" fn __alloca() {","highlight_start":1,"highlight_end":42},{"text":"        core::arch::asm!(","highlight_start":1,"highlight_end":26},{"text":"            \"mov    %rcx,%rax\", // x64 _alloca is a normal function with parameter in rcx","highlight_start":1,"highlight_end":90},{"text":"            \"jmp    ___chkstk\", // Jump to ___chkstk since fallthrough may be unreliable\"","highlight_start":1,"highlight_end":90},{"text":"            options(noreturn, att_syntax)","highlight_start":1,"highlight_end":42},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    #[naked]","highlight_start":1,"highlight_end":13},{"text":"    #[cfg(all(","highlight_start":1,"highlight_end":15},{"text":"        any(all(windows, target_env = \"gnu\"), target_os = \"uefi\"),","highlight_start":1,"highlight_end":67},{"text":"        not(feature = \"no-asm\")","highlight_start":1,"highlight_end":32},{"text":"    ))]","highlight_start":1,"highlight_end":8},{"text":"    pub unsafe extern \"C\" fn ___chkstk() {","highlight_start":1,"highlight_end":43},{"text":"        core::arch::asm!(","highlight_start":1,"highlight_end":26},{"text":"            \"push   %rcx\",","highlight_start":1,"highlight_end":27},{"text":"            \"cmp    $0x1000,%rax\",","highlight_start":1,"highlight_end":35},{"text":"            \"lea    16(%rsp),%rcx\", // rsp before calling this routine -> rcx","highlight_start":1,"highlight_end":78},{"text":"            \"jb     1f\",","highlight_start":1,"highlight_end":25},{"text":"            \"2:\",","highlight_start":1,"highlight_end":18},{"text":"            \"sub    $0x1000,%rcx\",","highlight_start":1,"highlight_end":35},{"text":"            \"test   %rcx,(%rcx)\",","highlight_start":1,"highlight_end":34},{"text":"            \"sub    $0x1000,%rax\",","highlight_start":1,"highlight_end":35},{"text":"            \"cmp    $0x1000,%rax\",","highlight_start":1,"highlight_end":35},{"text":"            \"ja     2b\",","highlight_start":1,"highlight_end":25},{"text":"            \"1:\",","highlight_start":1,"highlight_end":18},{"text":"            \"sub    %rax,%rcx\",","highlight_start":1,"highlight_end":32},{"text":"            \"test   %rcx,(%rcx)\",","highlight_start":1,"highlight_end":34},{"text":"            \"lea    8(%rsp),%rax\",  // load pointer to the return address into rax","highlight_start":1,"highlight_end":83},{"text":"            \"mov    %rcx,%rsp\",     // install the new top of stack pointer into rsp","highlight_start":1,"highlight_end":85},{"text":"            \"mov    -8(%rax),%rcx\", // restore rcx","highlight_start":1,"highlight_end":51},{"text":"            \"push   (%rax)\",        // push return address onto the stack","highlight_start":1,"highlight_end":74},{"text":"            \"sub    %rsp,%rax\",     // restore the original value in rax","highlight_start":1,"highlight_end":73},{"text":"            \"ret\",","highlight_start":1,"highlight_end":19},{"text":"            options(noreturn, att_syntax)","highlight_start":1,"highlight_end":42},{"text":"        );","highlight_start":1,"highlight_end":11},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"intrinsics!","def_site_span":{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/macros.rs","byte_start":3209,"byte_end":3232,"line_start":71,"line_end":71,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! intrinsics {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"intrinsics!","def_site_span":{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/macros.rs","byte_start":3209,"byte_end":3232,"line_start":71,"line_end":71,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! intrinsics {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"intrinsics!","def_site_span":{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/macros.rs","byte_start":3209,"byte_end":3232,"line_start":71,"line_end":71,"column_start":1,"column_end":24,"is_primary":false,"text":[{"text":"macro_rules! intrinsics {","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"ambiguous because of a conflict between a `macro_rules` name and a non-`macro_rules` name from another module","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`intrinsics` could refer to the macro defined here","code":null,"level":"note","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/macros.rs","byte_start":3209,"byte_end":18120,"line_start":71,"line_end":532,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"macro_rules! intrinsics {","highlight_start":1,"highlight_end":26},{"text":"    () => ();","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Support cfg_attr:","highlight_start":1,"highlight_end":25},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[cfg_attr($e:meta, $($attr:tt)*)]","highlight_start":1,"highlight_end":43},{"text":"        $(#[$($attrs:tt)*])*","highlight_start":1,"highlight_end":29},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident: $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":90},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg($e)]","highlight_start":1,"highlight_end":19},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            #[$($attr)*]","highlight_start":1,"highlight_end":25},{"text":"            $(#[$($attrs)*])*","highlight_start":1,"highlight_end":30},{"text":"            pub extern $abi fn $name($($argname: $ty),*) $(-> $ret)? {","highlight_start":1,"highlight_end":71},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not($e))]","highlight_start":1,"highlight_end":24},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attrs)*])*","highlight_start":1,"highlight_end":30},{"text":"            pub extern $abi fn $name($($argname: $ty),*) $(-> $ret)? {","highlight_start":1,"highlight_end":71},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    // Same as above but for unsafe.","highlight_start":1,"highlight_end":37},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[cfg_attr($e:meta, $($attr:tt)*)]","highlight_start":1,"highlight_end":43},{"text":"        $(#[$($attrs:tt)*])*","highlight_start":1,"highlight_end":29},{"text":"        pub unsafe extern $abi:tt fn $name:ident( $($argname:ident: $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":97},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg($e)]","highlight_start":1,"highlight_end":19},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            #[$($attr)*]","highlight_start":1,"highlight_end":25},{"text":"            $(#[$($attrs)*])*","highlight_start":1,"highlight_end":30},{"text":"            pub unsafe extern $abi fn $name($($argname: $ty),*) $(-> $ret)? {","highlight_start":1,"highlight_end":78},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not($e))]","highlight_start":1,"highlight_end":24},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attrs)*])*","highlight_start":1,"highlight_end":30},{"text":"            pub unsafe extern $abi fn $name($($argname: $ty),*) $(-> $ret)? {","highlight_start":1,"highlight_end":78},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Explicit weak linkage gets dropped when weak-intrinsics is on since it","highlight_start":1,"highlight_end":78},{"text":"    // will be added unconditionally to all intrinsics and would conflict","highlight_start":1,"highlight_end":74},{"text":"    // otherwise.","highlight_start":1,"highlight_end":18},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[weak]","highlight_start":1,"highlight_end":16},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(feature = \"weak-intrinsics\")]","highlight_start":1,"highlight_end":44},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(feature = \"weak-intrinsics\"))]","highlight_start":1,"highlight_end":49},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            #[linkage = \"weak\"]","highlight_start":1,"highlight_end":32},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"    // Same as above but for unsafe.","highlight_start":1,"highlight_end":37},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[weak]","highlight_start":1,"highlight_end":16},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub unsafe extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":98},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(feature = \"weak-intrinsics\")]","highlight_start":1,"highlight_end":44},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":80},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(feature = \"weak-intrinsics\"))]","highlight_start":1,"highlight_end":49},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            #[linkage = \"weak\"]","highlight_start":1,"highlight_end":32},{"text":"            pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":80},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Right now there's a bunch of architecture-optimized intrinsics in the","highlight_start":1,"highlight_end":77},{"text":"    // stock compiler-rt implementation. Not all of these have been ported over","highlight_start":1,"highlight_end":80},{"text":"    // to Rust yet so when the `c` feature of this crate is enabled we fall back","highlight_start":1,"highlight_end":81},{"text":"    // to the architecture-specific versions which should be more optimized. The","highlight_start":1,"highlight_end":81},{"text":"    // purpose of this macro is to easily allow specifying this.","highlight_start":1,"highlight_end":65},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // The `#[maybe_use_optimized_c_shim]` attribute indicates that this","highlight_start":1,"highlight_end":73},{"text":"    // intrinsic may have an optimized C version. In these situations the build","highlight_start":1,"highlight_end":80},{"text":"    // script, if the C code is enabled and compiled, will emit a cfg directive","highlight_start":1,"highlight_end":80},{"text":"    // to get passed to rustc for our compilation. If that cfg is set we skip","highlight_start":1,"highlight_end":78},{"text":"    // the Rust implementation, but if the attribute is not enabled then we","highlight_start":1,"highlight_end":76},{"text":"    // compile in the Rust implementation.","highlight_start":1,"highlight_end":43},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[maybe_use_optimized_c_shim]","highlight_start":1,"highlight_end":38},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub $(unsafe $(@ $empty:tt)? )? extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":119},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg($name = \"optimized-c\")]","highlight_start":1,"highlight_end":38},{"text":"        #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":67},{"text":"        pub $(unsafe $($empty)? )? extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":92},{"text":"            extern $abi {","highlight_start":1,"highlight_end":26},{"text":"                fn $name($($argname: $ty),*) $(-> $ret)?;","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                $name($($argname),*)","highlight_start":1,"highlight_end":37},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not($name = \"optimized-c\"))]","highlight_start":1,"highlight_end":43},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub $(unsafe $($empty)? )? extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":96},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // We recognize the `#[aapcs_on_arm]` attribute here and generate the","highlight_start":1,"highlight_end":74},{"text":"    // same intrinsic but force it to have the `\"aapcs\"` calling convention on","highlight_start":1,"highlight_end":79},{"text":"    // ARM and `\"C\"` elsewhere.","highlight_start":1,"highlight_end":32},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[aapcs_on_arm]","highlight_start":1,"highlight_end":24},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(target_arch = \"arm\")]","highlight_start":1,"highlight_end":36},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern \"aapcs\" fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":76},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(target_arch = \"arm\"))]","highlight_start":1,"highlight_end":41},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Like aapcs above we recognize an attribute for the \"unadjusted\" abi on","highlight_start":1,"highlight_end":78},{"text":"    // win64 for some methods.","highlight_start":1,"highlight_end":31},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[unadjusted_on_win64]","highlight_start":1,"highlight_end":31},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(all(any(windows, all(target_os = \"uefi\", target_arch = \"x86_64\")), target_pointer_width = \"64\"))]","highlight_start":1,"highlight_end":112},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern \"unadjusted\" fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":81},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(all(any(windows, all(target_os = \"uefi\", target_arch = \"x86_64\")), target_pointer_width = \"64\")))]","highlight_start":1,"highlight_end":117},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Some intrinsics on win64 which return a 128-bit integer have an.. unusual","highlight_start":1,"highlight_end":81},{"text":"    // calling convention. That's managed here with this \"abi hack\" which alters","highlight_start":1,"highlight_end":81},{"text":"    // the generated symbol's ABI.","highlight_start":1,"highlight_end":35},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // This will still define a function in this crate with the given name and","highlight_start":1,"highlight_end":79},{"text":"    // signature, but the actual symbol for the intrinsic may have a slightly","highlight_start":1,"highlight_end":78},{"text":"    // different ABI on win64.","highlight_start":1,"highlight_end":31},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[win64_128bit_abi_hack]","highlight_start":1,"highlight_end":33},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(all(any(windows, target_os = \"uefi\"), target_arch = \"x86_64\"))]","highlight_start":1,"highlight_end":78},{"text":"        $(#[$($attr)*])*","highlight_start":1,"highlight_end":25},{"text":"        #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":67},{"text":"        pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":69},{"text":"            $($body)*","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(all(any(windows, target_os = \"uefi\"), target_arch = \"x86_64\"))]","highlight_start":1,"highlight_end":78},{"text":"        pub mod $name {","highlight_start":1,"highlight_end":24},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":71},{"text":"            pub extern $abi fn $name( $($argname: $ty),* )","highlight_start":1,"highlight_end":59},{"text":"                -> $crate::macros::win64_128bit_abi_hack::U64x2","highlight_start":1,"highlight_end":64},{"text":"            {","highlight_start":1,"highlight_end":14},{"text":"                let e: $($ret)? = super::$name($($argname),*);","highlight_start":1,"highlight_end":63},{"text":"                $crate::macros::win64_128bit_abi_hack::U64x2::from(e)","highlight_start":1,"highlight_end":70},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(all(any(windows, target_os = \"uefi\"), target_arch = \"x86_64\")))]","highlight_start":1,"highlight_end":83},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // A bunch of intrinsics on ARM are aliased in the standard compiler-rt","highlight_start":1,"highlight_end":76},{"text":"    // build under `__aeabi_*` aliases, and LLVM will call these instead of the","highlight_start":1,"highlight_end":80},{"text":"    // original function. The aliasing here is used to generate these symbols in","highlight_start":1,"highlight_end":81},{"text":"    // the object file.","highlight_start":1,"highlight_end":24},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[arm_aeabi_alias = $alias:ident]","highlight_start":1,"highlight_end":42},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(target_arch = \"arm\")]","highlight_start":1,"highlight_end":36},{"text":"        pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":69},{"text":"            $($body)*","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(target_arch = \"arm\")]","highlight_start":1,"highlight_end":36},{"text":"        pub mod $name {","highlight_start":1,"highlight_end":24},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":71},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                super::$name($($argname),*)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(target_arch = \"arm\")]","highlight_start":1,"highlight_end":36},{"text":"        pub mod $alias {","highlight_start":1,"highlight_end":25},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(any(all(not(windows), not(target_vendor=\"apple\")), feature = \"weak-intrinsics\"), linkage = \"weak\")]","highlight_start":1,"highlight_end":123},{"text":"            pub extern \"aapcs\" fn $alias( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":77},{"text":"                super::$name($($argname),*)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(not(target_arch = \"arm\"))]","highlight_start":1,"highlight_end":41},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // C mem* functions are only generated when the \"mem\" feature is enabled.","highlight_start":1,"highlight_end":78},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[mem_builtin]","highlight_start":1,"highlight_end":23},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub unsafe extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":98},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        $(#[$($attr)*])*","highlight_start":1,"highlight_end":25},{"text":"        pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":76},{"text":"            $($body)*","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[cfg(feature = \"mem\")]","highlight_start":1,"highlight_end":32},{"text":"        pub mod $name {","highlight_start":1,"highlight_end":24},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":71},{"text":"            pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":80},{"text":"                super::$name($($argname),*)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Naked functions are special: we can't generate wrappers for them since","highlight_start":1,"highlight_end":78},{"text":"    // they use a custom calling convention.","highlight_start":1,"highlight_end":45},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[naked]","highlight_start":1,"highlight_end":17},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub unsafe extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":98},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        pub mod $name {","highlight_start":1,"highlight_end":24},{"text":"            #[naked]","highlight_start":1,"highlight_end":21},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":71},{"text":"            pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":80},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // For some intrinsics, AVR uses a custom calling convention¹ that does not","highlight_start":1,"highlight_end":80},{"text":"    // match our definitions here. Ideally we would just use hand-written naked","highlight_start":1,"highlight_end":80},{"text":"    // functions, but that's quite a lot of code to port² - so for the time","highlight_start":1,"highlight_end":76},{"text":"    // being we are just ignoring the problematic functions, letting avr-gcc","highlight_start":1,"highlight_end":77},{"text":"    // (which is required to compile to AVR anyway) link them from libgcc.","highlight_start":1,"highlight_end":75},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // ¹ https://gcc.gnu.org/wiki/avr-gcc (see \"Exceptions to the Calling","highlight_start":1,"highlight_end":74},{"text":"    //   Convention\")","highlight_start":1,"highlight_end":22},{"text":"    // ² https://github.com/gcc-mirror/gcc/blob/31048012db98f5ec9c2ba537bfd850374bdd771f/libgcc/config/avr/lib1funcs.S","highlight_start":1,"highlight_end":119},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        #[avr_skip]","highlight_start":1,"highlight_end":20},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        #[cfg(not(target_arch = \"avr\"))]","highlight_start":1,"highlight_end":41},{"text":"        intrinsics! {","highlight_start":1,"highlight_end":22},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                $($body)*","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // This is the final catch-all rule. At this point we generate an","highlight_start":1,"highlight_end":70},{"text":"    // intrinsic with a conditional `#[no_mangle]` directive to avoid","highlight_start":1,"highlight_end":70},{"text":"    // interfering with duplicate symbols and whatnot during testing.","highlight_start":1,"highlight_end":70},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // The implementation is placed in a separate module, to take advantage","highlight_start":1,"highlight_end":76},{"text":"    // of the fact that rustc partitions functions into code generation","highlight_start":1,"highlight_end":72},{"text":"    // units based on module they are defined in. As a result we will have","highlight_start":1,"highlight_end":75},{"text":"    // a separate object file for each intrinsic. For further details see","highlight_start":1,"highlight_end":74},{"text":"    // corresponding PR in rustc https://github.com/rust-lang/rust/pull/70846","highlight_start":1,"highlight_end":78},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // After the intrinsic is defined we just continue with the rest of the","highlight_start":1,"highlight_end":76},{"text":"    // input we were given.","highlight_start":1,"highlight_end":28},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":91},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        $(#[$($attr)*])*","highlight_start":1,"highlight_end":25},{"text":"        pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":69},{"text":"            $($body)*","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub mod $name {","highlight_start":1,"highlight_end":24},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":71},{"text":"            pub extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":73},{"text":"                super::$name($($argname),*)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Same as the above for unsafe functions.","highlight_start":1,"highlight_end":47},{"text":"    (","highlight_start":1,"highlight_end":6},{"text":"        $(#[$($attr:tt)*])*","highlight_start":1,"highlight_end":28},{"text":"        pub unsafe extern $abi:tt fn $name:ident( $($argname:ident:  $ty:ty),* ) $(-> $ret:ty)? {","highlight_start":1,"highlight_end":98},{"text":"            $($body:tt)*","highlight_start":1,"highlight_end":25},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $($rest:tt)*","highlight_start":1,"highlight_end":21},{"text":"    ) => (","highlight_start":1,"highlight_end":11},{"text":"        $(#[$($attr)*])*","highlight_start":1,"highlight_end":25},{"text":"        pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":76},{"text":"            $($body)*","highlight_start":1,"highlight_end":22},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        pub mod $name {","highlight_start":1,"highlight_end":24},{"text":"            $(#[$($attr)*])*","highlight_start":1,"highlight_end":29},{"text":"            #[cfg_attr(not(feature = \"mangled-names\"), no_mangle)]","highlight_start":1,"highlight_end":67},{"text":"            #[cfg_attr(feature = \"weak-intrinsics\", linkage = \"weak\")]","highlight_start":1,"highlight_end":71},{"text":"            pub unsafe extern $abi fn $name( $($argname: $ty),* ) $(-> $ret)? {","highlight_start":1,"highlight_end":80},{"text":"                super::$name($($argname),*)","highlight_start":1,"highlight_end":44},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        intrinsics!($($rest)*);","highlight_start":1,"highlight_end":32},{"text":"    );","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`intrinsics` could also refer to the unresolved item imported here","code":null,"level":"note","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/x86_64.rs","byte_start":31,"byte_end":47,"line_start":3,"line_end":3,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"use core::intrinsics;","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"use `self::intrinsics` to refer to this unresolved item unambiguously","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0659]\u001b[0m\u001b[0m\u001b[1m: `intrinsics` is ambiguous\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/macros.rs:438:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        intrinsics!($($rest)*);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mambiguous name\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/x86_64.rs:11:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mintrinsics! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[naked]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[cfg(all(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        any(all(windows, target_env = \"gnu\"), target_os = \"uefi\"),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: ambiguous because of a conflict between a `macro_rules` name and a non-`macro_rules` name from another module\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `intrinsics` could refer to the macro defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/macros.rs:71:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mmacro_rules! intrinsics {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    () => ();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // Support cfg_attr:\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m531\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m532\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `intrinsics` could also refer to the unresolved item imported here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/x86_64.rs:3:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse core::intrinsics;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: use `self::intrinsics` to refer to this unresolved item unambiguously\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `intrinsics` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs","byte_start":100,"byte_end":112,"line_start":2,"line_end":2,"column_start":38,"column_end":50,"is_primary":true,"text":[{"text":"#![cfg_attr(not(feature = \"no-asm\"), feature(asm))]","highlight_start":38,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs:2:38\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(not(feature = \"no-asm\"), feature(asm))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs","byte_start":115,"byte_end":142,"line_start":3,"line_end":3,"column_start":1,"column_end":28,"is_primary":true,"text":[{"text":"#![feature(abi_unadjusted)]","highlight_start":1,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs:3:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(abi_unadjusted)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs","byte_start":180,"byte_end":199,"line_start":4,"line_end":4,"column_start":38,"column_end":57,"is_primary":true,"text":[{"text":"#![cfg_attr(not(feature = \"no-asm\"), feature(global_asm))]","highlight_start":38,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs:4:38\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(not(feature = \"no-asm\"), feature(global_asm))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs","byte_start":202,"byte_end":236,"line_start":5,"line_end":5,"column_start":1,"column_end":35,"is_primary":true,"text":[{"text":"#![feature(cfg_target_has_atomic)]","highlight_start":1,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs:5:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(cfg_target_has_atomic)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs","byte_start":237,"byte_end":267,"line_start":6,"line_end":6,"column_start":1,"column_end":31,"is_primary":true,"text":[{"text":"#![feature(compiler_builtins)]","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs:6:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(compiler_builtins)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs","byte_start":268,"byte_end":291,"line_start":7,"line_end":7,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"#![feature(core_ffi_c)]","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs:7:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(core_ffi_c)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs","byte_start":292,"byte_end":320,"line_start":8,"line_end":8,"column_start":1,"column_end":29,"is_primary":true,"text":[{"text":"#![feature(core_intrinsics)]","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs:8:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(core_intrinsics)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs","byte_start":321,"byte_end":346,"line_start":9,"line_end":9,"column_start":1,"column_end":26,"is_primary":true,"text":[{"text":"#![feature(inline_const)]","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs:9:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(inline_const)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs","byte_start":347,"byte_end":370,"line_start":10,"line_end":10,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"#![feature(lang_items)]","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs:10:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(lang_items)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs","byte_start":371,"byte_end":391,"line_start":11,"line_end":11,"column_start":1,"column_end":21,"is_primary":true,"text":[{"text":"#![feature(linkage)]","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs:11:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(linkage)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs","byte_start":392,"byte_end":420,"line_start":12,"line_end":12,"column_start":1,"column_end":29,"is_primary":true,"text":[{"text":"#![feature(naked_functions)]","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs:12:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(naked_functions)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs","byte_start":421,"byte_end":443,"line_start":13,"line_end":13,"column_start":1,"column_end":23,"is_primary":true,"text":[{"text":"#![feature(repr_simd)]","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs:13:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(repr_simd)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs","byte_start":108,"byte_end":111,"line_start":2,"line_end":2,"column_start":46,"column_end":49,"is_primary":true,"text":[{"text":"#![cfg_attr(not(feature = \"no-asm\"), feature(asm))]","highlight_start":46,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs:2:46\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(not(feature = \"no-asm\"), feature(asm))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs","byte_start":188,"byte_end":198,"line_start":4,"line_end":4,"column_start":46,"column_end":56,"is_primary":true,"text":[{"text":"#![cfg_attr(not(feature = \"no-asm\"), feature(global_asm))]","highlight_start":46,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs:4:46\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![cfg_attr(not(feature = \"no-asm\"), feature(global_asm))]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs","byte_start":279,"byte_end":289,"line_start":7,"line_end":7,"column_start":12,"column_end":22,"is_primary":true,"text":[{"text":"#![feature(core_ffi_c)]","highlight_start":12,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs:7:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(core_ffi_c)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs","byte_start":303,"byte_end":318,"line_start":8,"line_end":8,"column_start":12,"column_end":27,"is_primary":true,"text":[{"text":"#![feature(core_intrinsics)]","highlight_start":12,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/lib.rs:8:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(core_intrinsics)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"cannot find function, tuple struct or tuple variant `Some` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/sdiv.rs","byte_start":1058,"byte_end":1062,"line_start":29,"line_end":29,"column_start":58,"column_end":62,"is_primary":true,"text":[{"text":"                let t = $unsigned_fn(a as $uX, b as $uX, Some(&mut r)) as $iX;","highlight_start":58,"highlight_end":62}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/sdiv.rs","byte_start":3649,"byte_end":3744,"line_start":117,"line_end":123,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"sdivmod!(","highlight_start":1,"highlight_end":10},{"text":"    __udivmodsi4,","highlight_start":1,"highlight_end":18},{"text":"    __divmodsi4,","highlight_start":1,"highlight_end":17},{"text":"    u32,","highlight_start":1,"highlight_end":9},{"text":"    i32,","highlight_start":1,"highlight_end":9},{"text":"    maybe_use_optimized_c_shim","highlight_start":1,"highlight_end":31},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sdivmod!","def_site_span":{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/sdiv.rs","byte_start":26,"byte_end":46,"line_start":3,"line_end":3,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! sdivmod {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `Some` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/sdiv.rs:29:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                let t = $unsigned_fn(a as $uX, b as $uX, Some(&mut r)) as $iX;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msdivmod!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    __udivmodsi4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    __divmodsi4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    u32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    i32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    maybe_use_optimized_c_shim\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `sdivmod` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"cannot find function, tuple struct or tuple variant `Some` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/sdiv.rs","byte_start":1058,"byte_end":1062,"line_start":29,"line_end":29,"column_start":58,"column_end":62,"is_primary":true,"text":[{"text":"                let t = $unsigned_fn(a as $uX, b as $uX, Some(&mut r)) as $iX;","highlight_start":58,"highlight_end":62}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/sdiv.rs","byte_start":4470,"byte_end":4565,"line_start":150,"line_end":156,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"sdivmod!(","highlight_start":1,"highlight_end":10},{"text":"    __udivmoddi4,","highlight_start":1,"highlight_end":18},{"text":"    __divmoddi4,","highlight_start":1,"highlight_end":17},{"text":"    u64,","highlight_start":1,"highlight_end":9},{"text":"    i64,","highlight_start":1,"highlight_end":9},{"text":"    maybe_use_optimized_c_shim","highlight_start":1,"highlight_end":31},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sdivmod!","def_site_span":{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/sdiv.rs","byte_start":26,"byte_end":46,"line_start":3,"line_end":3,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! sdivmod {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `Some` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/sdiv.rs:29:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                let t = $unsigned_fn(a as $uX, b as $uX, Some(&mut r)) as $iX;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msdivmod!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    __udivmoddi4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    __divmoddi4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m153\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    u64,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    i64,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    maybe_use_optimized_c_shim\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `sdivmod` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"cannot find function, tuple struct or tuple variant `Some` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/sdiv.rs","byte_start":1058,"byte_end":1062,"line_start":29,"line_end":29,"column_start":58,"column_end":62,"is_primary":true,"text":[{"text":"                let t = $unsigned_fn(a as $uX, b as $uX, Some(&mut r)) as $iX;","highlight_start":58,"highlight_end":62}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/sdiv.rs","byte_start":4771,"byte_end":4868,"line_start":161,"line_end":167,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"sdivmod!(","highlight_start":1,"highlight_end":10},{"text":"    __udivmodti4,","highlight_start":1,"highlight_end":18},{"text":"    __divmodti4,","highlight_start":1,"highlight_end":17},{"text":"    u128,","highlight_start":1,"highlight_end":10},{"text":"    i128,","highlight_start":1,"highlight_end":10},{"text":"    maybe_use_optimized_c_shim","highlight_start":1,"highlight_end":31},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sdivmod!","def_site_span":{"file_name":"/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/sdiv.rs","byte_start":26,"byte_end":46,"line_start":3,"line_end":3,"column_start":1,"column_end":21,"is_primary":false,"text":[{"text":"macro_rules! sdivmod {","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find function, tuple struct or tuple variant `Some` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/pointer-to-bios/.cargo/registry/src/index.crates.io-6f17d22bba15001f/compiler_builtins-0.1.104/src/int/sdiv.rs:29:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                let t = $unsigned_fn(a as $uX, b as $uX, Some(&mut r)) as $iX;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msdivmod!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    __udivmodti4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    __divmodti4,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    u128,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    i128,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    maybe_use_optimized_c_shim\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `sdivmod` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 94 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 94 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0405, E0412, E0425, E0432, E0433, E0531, E0554, E0659.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0405, E0412, E0425, E0432, E0433, E0531, E0554, E0659.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0405`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0405`.\u001b[0m\n"}
